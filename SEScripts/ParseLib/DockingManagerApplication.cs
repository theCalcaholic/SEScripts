using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using VRageMath;
using VRage.Game;
using VRage.Collections;
using Sandbox.ModAPI.Ingame;
using VRage.Game.Components;
using VRage.Game.ModAPI.Ingame;
using Sandbox.ModAPI.Interfaces;
using Sandbox.Game.EntityComponents;
using SpaceEngineers.Game.ModAPI.Ingame;
using VRage.Game.ObjectBuilders.Definitions;

using SEScripts.Lib.LoggerNS;
using SEScripts.XUI.BoxRenderer;

namespace SEScripts.ParseLib.Programs {
/*****************************************************************
This file is automatically generated. Don't change it's content;
such changes will be overwritten on next build.
*****************************************************************/
public class Program : MyGridProgram
{
static string TimerName = "DockingMgr Timer";
static string Port1ConnectorName = "Port1Connector";
static string Port1Light1Name = "Port1Light1";
static string Port1Light2Name = "Port1Light2";
static IMyTextPanel DebugPanel;
MAN.RegisteredAgent LocalAgent;
static MyGridProgram P;
bool Registered;
DockingManager DockingMgr;

public Program() {
Logger.DEBUG = true;
P = this;
LocalAgent = new MAN.RegisteredAgent(this);
IMyTimerBlock timer = GridTerminalSystem.GetBlockWithName(TimerName) as IMyTimerBlock;
LocalAgent.SetTimer(timer);
Echo(LocalAgent.Id.ToString());
DockingMgr = new DockingManager();
DockingMgr.AddDockingPort(new DockingManager.LandingPad(
"Landing Pad 1",
GridTerminalSystem.GetBlockWithName(Port1ConnectorName) as IMyShipConnector,
DockingManager.ShipClass.FIGHTER,
new List<IMyLightingBlock>
{
GridTerminalSystem.GetBlockWithName(Port1Light1Name) as IMyLightingBlock,
GridTerminalSystem.GetBlockWithName(Port1Light2Name) as IMyLightingBlock
}));
string dockingGranted = "Docking request granted.<br/>Please proceed to $PORTNAME$.";
string dockingDeniedPortsOccupied = "Docking request denied.<br/>All matching docking ports are currently occupied.<br/>Please try again later.";
//string dockingDeniedNoPort = "Docking Request denied.<br/>There is no matching docking port available on this station.";
string appId = "request-docking";
MAN.UIServerProtocol tmpServer = new MAN.UIServerProtocol(LocalAgent);
tmpServer.SelectApplication(appId);
string dockingRequestMeta = ""+
"<meta fontColor='8800FF' backgroundColor='000000' fontSize='1.6' $META$/>";
MAN.UIServerProtocol.CreateApplication(
LocalAgent,
appId,
"Request Docking",
new Dictionary<string, Func<MAN.UIServerProtocol, MAN.AgentMessage, Dictionary<string, string>, string>> {
{"", (session, request, data) =>
dockingRequestMeta.Replace("$META$", "historydisabled").Replace("fontSize='1.6'", "fontSize='2.0'") +
"<hl/>"+
"Please submit your ship class:"+
"<menu name='shipclass'>"+
"<menuitem value='1' route='" + tmpServer.MakeApplicationRoute("request", "") + "'>"+
"Small"+
"</menuitem>"+
"<menuitem value='2' route='" + tmpServer.MakeApplicationRoute("request", "") + "'>"+
"Medium"+
"</menuitem>"+
"<menuitem value='3' route='" + tmpServer.MakeApplicationRoute("request", "") + "'>"+
"Large"+
"</menuitem>"+
"</menu>"
},
{"request", (session, request, data) =>
{
string classString = data.GetValueOrDefault("shipclass", null);
DockingManager.ShipClass shipClass;
using(new Logger("ship class: " + classString)) { };
switch(classString)
{
case "1":
shipClass = DockingManager.ShipClass.FIGHTER;
break;
case "2":
shipClass = DockingManager.ShipClass.FREIGHTER;
break;
case "3":
shipClass = DockingManager.ShipClass.MASSIVE;
break;
default:
return "<meta fontColor='FF0000' fontSize='2.0' backgroundColor='000000' historydisabled/><uicontrols/>Error: Invalid ship class selected!";
}
string portName = DockingMgr.RequestDocking(shipClass);
if(portName == null)
return dockingRequestMeta.Replace("$META$", "historydisabled") + "<uicontrols/>" + dockingDeniedPortsOccupied;
return dockingRequestMeta.Replace("$META$", "historydisabled") + "<uicontrols/>" + dockingGranted.Replace("$PORTNAME", portName);
}
}
}
);
foreach(var srv in LocalAgent.Services)
{
Echo(srv.Value.ToXML());
}
Register();
}
public void Register()
{
List<IMyTerminalBlock> blocks = new List<IMyTerminalBlock>();
GridTerminalSystem.SearchBlocksOfName("GridMaster", blocks,
(block) => (block as IMyProgrammableBlock != null));
if (blocks.Count > 0)
{
string platformName = blocks[0].CustomName;
LocalAgent.RegisterWith(platformName);
Registered = true;
}
}

public void Main(string argument) {
if (!Registered)
Register();
using(new Logger("Main( " + argument + ")", Logger.Mode.DEBUG)){}
List<string> parameters = Parser.ParamString2List(argument);

if( parameters.Count > 0 ) {
switch(parameters[0]) {
case "message":
LocalAgent.ReceiveMessage(MAN.AgentMessage.FromXML(parameters[1]));
break;
case "refresh":
LocalAgent.Refresh(ElapsedTime);
break;
case "disable":
if(parameters.Count > 1)
DockingMgr.DisablePort(parameters[1]);
break;
}
}
P.Me.CustomData  = Logger.Output;
}

public void Save() {
string data;
LocalAgent.Save(out data);
Storage = data;
}

class DockingManager
{
public enum ShipClass { MASSIVE, FREIGHTER, FIGHTER }
Dictionary<string, DockingPort> Ports;
public DockingManager()
{
Ports = new Dictionary<string, DockingPort>();
}
public void AddDockingPort(DockingPort port)
{
if(port != null)
{
if (Ports.ContainsKey(port.Name))
throw new Exception("ERROR: A port with the name '" + port.Name + "' was already added! Port names must be unique.");
Ports.Add(port.Name, port);
}
}
public string RequestDocking(ShipClass shipClass)
{
foreach(DockingPort port in Ports.Values)
{
if(!port.Enabled && port.CompatibleShipClass == shipClass)
{
port.Enable();
return port.Name;
}
}
return null;
}
public void DisablePort(string portName)
{
DockingPort port = Ports.GetValueOrDefault(portName, null);
if(port != null)
{
port.Disable();
}
}
public abstract class DockingPort
{
public enum PortClass { HANGAR, PAD, TUNNEL }
protected IMyShipConnector _connector;
protected ShipClass _compatibleShipClass;
protected PortClass _class;
protected string _name;
protected bool _enabled;
public IMyShipConnector Connector
{
get { return _connector; }
}
public ShipClass CompatibleShipClass
{
get { return _compatibleShipClass; }
}
public PortClass Class
{
get { return _class; }
}
public string Name
{
get { return _name; }
}
public bool Enabled
{
get { return _enabled; }
}
public DockingPort(string name, IMyShipConnector connector, ShipClass compatibleShips, PortClass portClass)
{
_connector = connector;
_compatibleShipClass = compatibleShips;
_class = portClass;
_name = name;
_enabled = false;
Connector.Enabled = false;
}
public abstract void Enable();
public abstract void Disable();
}
public class LandingPad : DockingPort
{
List<IMyLightingBlock> Lights;
public LandingPad(string name, IMyShipConnector connector, ShipClass compatibleShips,
List<IMyLightingBlock> lights = null)
: base(name, connector, compatibleShips, PortClass.PAD)
{
Lights = lights ?? new List<IMyLightingBlock>();
Disable();
}
public override void Enable()
{
Connector.Enabled = true;
foreach(IMyLightingBlock light in Lights)
{
light.Color = Color.Green;
}
}
public override void Disable()
{
_enabled = false;
Connector.Enabled = false;
foreach(IMyLightingBlock light in Lights)
{
light.Color = Color.Red;
}
}
}
}

public static class XML{public static Dictionary<string,Func<XMLTree>>NodeRegister=new Dictionary<string,Func<XMLTree>>{{"root",()=>{return new RootNode();}},{"menu",()=>{return new Menu();}},{"menuitem",()=>{return new MenuItem();}},{"progressbar",()=>{return new ProgressBar();}},{"hl",()=>{return new HorizontalLine();}},{"vl",()=>{return new VerticalLine();}},{"uicontrols",()=>{return new UIControls();}},{"textinput",()=>{return new TextInput();}},{"submitbutton",()=>{return new SubmitButton();}},{"br",()=>{return new Break();}},{"space",()=>{return new Space();}},{"hidden",()=>{return new Hidden();}},{"hiddendata",()=>{return new Hidden();}},{"meta",()=>{return new r();}}};public static XMLTree CreateNode(string a){a=a.ToLower();if(NodeRegister.ContainsKey(a)){return NodeRegister[a]();}else{return new Generic(a);}}public static XMLTree ParseXML(string a){char[]b={' ','\n'};RootNode c=new RootNode();XMLTree d=c;string e;while(a.Length>0){if(a[0]=='<'){if(a[1]=='/'){int f=a.IndexOfAny(b);int g=a.IndexOf('>');int h=(f==-1?g:Math.Min(f,g))-2;e=a.Substring(2,h).ToLower();if(e!=d.Type){throw new Exception("Invalid end tag ('"+e+"(!= "+d.Type+"') found (node has been ended but not started)!");}d=d.GetParent()as XMLTree;a=a.Substring(g+1);}else{int f=a.IndexOfAny(b);int g=Parser.GetNextOutsideQuotes('>',a);int h=(f==-1?g:Math.Min(f,g))-1;e=a.Substring(1,h).ToLower().TrimEnd(new char[]{'/'});XMLTree i=XML.CreateNode(e);if(i==null){int j=a.IndexOf("<");int k=j==-1?a.Length:j;i=new XML.TextNode(a.Substring(0,k).Trim());}d.AddChild(i);if(f!=-1&&f<g){string l=a.Substring(h+2,g-h-2);l=l.TrimEnd(new char[]{'/'});Dictionary<string,string>m=Parser.GetXMLAttributes(l);foreach(string key in m.Keys){i.SetAttribute(key,m[key]);}}if(i.Type=="textnode"||g==-1||a[g-1]!='/'){d=i;}a=a.Substring(g+1);}}else{int g=a.IndexOf("<");int k=g==-1?a.Length:g;XMLTree i=new XML.TextNode(a.Substring(0,k).Trim());if(true||i.GetRenderBox(-1,-1)!=null){d.AddChild(i);}a=g==-1?"":a.Substring(g);}}return c;}public class RootNode:XMLTree{public RootNode():base(){Type="root";PreventDefault("UP");PreventDefault("DOWN");}public override string GetAttribute(string a){XMLTree b=GetNode(c=>{return c.Type=="meta";});string d;if(b!=null){d=b.GetAttribute(a);}else{d=base.GetAttribute(a);}switch(a){case "width":if(d==null){d="100%";}break;}return d;}public override void SetAttribute(string a,string b){XMLTree c=GetNode(d=>{return d.Type=="meta";});if(c!=null){c.SetAttribute(a,b);}else{base.SetAttribute(a,b);}}public override void UpdateSelectability(XMLTree a){base.UpdateSelectability(a);if(IsSelectable()&&!IsSelected()){SelectFirst();}}public override bool SelectNext(){if(IsSelectable()&&!base.SelectNext()){return SelectNext();}return true;}public override bool SelectPrevious(){if(!base.SelectPrevious()){return SelectPrevious();}return true;}public override void OnKeyPressed(string a){switch(a){case "UP":SelectPrevious();break;case "DOWN":SelectNext();break;}}}public abstract class XMLTree:XMLParentNode{public string Type;private XMLParentNode Parent;private List<string>PreventDefaults;protected List<XMLTree>Children;protected bool Selectable;protected bool ChildrenAreSelectable;private bool Selected;protected int SelectedChild;protected bool Activated;protected Dictionary<string,string>Attributes;private bool _hasUserInputBindings;private RenderBox _renderCache;public bool HasUserInputBindings{get{return _hasUserInputBindings;}set{_hasUserInputBindings=value;if(Parent!=null&&HasUserInputBindings){Parent.HasUserInputBindings=true;}}}public int NumberOfChildren{get{return Children.Count;}}protected bool RerenderRequired;public virtual RenderBox GetRenderBox(int a,int b){RenderBoxTree c=new RenderBoxTree();c.type=Type;RenderBox d;foreach(XMLTree child in Children){d=child.GetRenderBox(a,b);c.Add(d);}UpdateRenderCacheProperties(c,a,b);return c;}protected void UpdateRenderCacheProperties(RenderBox a,int b,int c){a.Flow=GetAttribute("flow")=="horizontal"?RenderBox.FlowDirection.HORIZONTAL:RenderBox.FlowDirection.VERTICAL;switch(GetAttribute("alignself")){case "right":a.Align=RenderBox.TextAlign.RIGHT;break;case "center":a.Align=RenderBox.TextAlign.CENTER;break;default:a.Align=RenderBox.TextAlign.LEFT;break;}a.MinWidth=Math.Max(0,ResolveSize(GetAttribute("minwidth"),b));a.MaxWidth=ResolveSize(GetAttribute("maxwidth"),b);a.DesiredWidth=ResolveSize(GetAttribute("width"),b);int d=ResolveSize(GetAttribute("forcewidth"),b);if(d!=-1){a.MinWidth=d;a.MaxWidth=d;}a.MinHeight=Math.Max(0,ResolveSize(GetAttribute("minheight"),c));a.MaxHeight=ResolveSize(GetAttribute("maxheight"),c);a.DesiredHeight=ResolveSize(GetAttribute("height"),c);int e=ResolveSize(GetAttribute("forceheight"),b);if(e!=-1){a.MinHeight=e;a.MaxHeight=e;}}public static int ResolveSize(string a,int b){if(a!=null)a=a.Trim();float c;if(a!=null&&a[a.Length-1]=='%'&&Single.TryParse(a.Substring(0,a.Length-1),out c)){if(b==-1)return-1;return(int)(c/100f*Math.Max(0,b));}else{int d=-1;if(Int32.TryParse(a,out d))return d;return-1;}}public XMLTree(){HasUserInputBindings=false;PreventDefaults=new List<string>();Parent=null;Children=new List<XMLTree>();Selectable=false;ChildrenAreSelectable=false;Selected=false;SelectedChild=-1;Activated=false;Attributes=new Dictionary<string,string>();RerenderRequired=true;Type="NULL";SetAttribute("alignself","left");SetAttribute("aligntext","left");SetAttribute("selected","false");SetAttribute("selectable","false");SetAttribute("flow","vertical");}public bool IsSelectable(){return Selectable||ChildrenAreSelectable;}public bool IsSelected(){return Selected;}public XMLTree GetSelectedSibling(){if(!Selected){return null;}if(SelectedChild==-1){return this;}else{return Children[SelectedChild].GetSelectedSibling();}}public virtual void AddChild(XMLTree a){AddChildAt(Children.Count,a);}public virtual void AddChildAt(int a,XMLTree b){if(a>Children.Count){throw new Exception("XMLTree.AddChildAt - Exception: position must be less than number of children!");}RerenderRequired=true;Children.Insert(a,b);b.SetParent(this as XMLParentNode);UpdateSelectability(b);}public void SetParent(XMLParentNode a){Parent=a;if(HasUserInputBindings&&Parent!=null){Parent.HasUserInputBindings=true;}}public XMLParentNode GetParent(){return Parent;}public XMLTree GetChild(int a){return a<Children.Count?Children[a]:null;}public XMLTree GetNode(Func<XMLTree,bool>a){if(a(this)){return this;}else{XMLTree b=GetChild(0);XMLTree c;for(int d=1;b!=null;d++){c=b.GetNode(a);if(c!=null){return c;}b=GetChild(d);}}return null;}public List<XMLTree>GetAllNodes(Func<XMLTree,bool>a){List<XMLTree>b=new List<XMLTree>();GetAllNodes(a,ref b);return b;}private void GetAllNodes(Func<XMLTree,bool>a,ref List<XMLTree>b){if(a(this)){b.Add(this);}XMLTree c=GetChild(0);for(int d=1;c!=null;d++){c.GetAllNodes(a,ref b);c=GetChild(d);}}public virtual void UpdateSelectability(XMLTree a){bool b=ChildrenAreSelectable;ChildrenAreSelectable=ChildrenAreSelectable||a.IsSelectable();if((Selectable||ChildrenAreSelectable)!=(Selectable||b)){RerenderRequired=true;if(Parent!=null)Parent.UpdateSelectability(this);}}public bool SelectFirst(){if(SelectedChild!=-1){Children[SelectedChild].Unselect();}SelectedChild=-1;bool a=(Selectable||ChildrenAreSelectable)?SelectNext():false;return a;}public bool SelectLast(){if(SelectedChild!=-1){Children[SelectedChild].Unselect();}SelectedChild=-1;return(Selectable||ChildrenAreSelectable)?SelectPrevious():false;}public void Unselect(){if(SelectedChild!=-1){Children[SelectedChild].Unselect();}Selected=false;Activated=false;}public virtual bool SelectNext(){bool a=IsSelected();if(SelectedChild==-1||!Children[SelectedChild].SelectNext()){SelectedChild++;while((SelectedChild<Children.Count&&(!Children[SelectedChild].SelectFirst()))){SelectedChild++;}if(SelectedChild==Children.Count){SelectedChild=-1;Selected=Selectable&&!Selected;}else{Selected=true;}}if(!Selected){Unselect();}if(!a&&IsSelected()){OnSelect();RerenderRequired=true;}return Selected;}public virtual bool SelectPrevious(){bool a=IsSelected();if(SelectedChild==-1){SelectedChild=Children.Count;}if(SelectedChild==Children.Count||!Children[SelectedChild].SelectPrevious()){SelectedChild--;while(SelectedChild>-1&&!Children[SelectedChild].SelectLast()){SelectedChild--;}if(SelectedChild==-1){Selected=Selectable&&!Selected;}else{Selected=true;}}if(!Selected){Unselect();}if(!a&&IsSelected()){OnSelect();RerenderRequired=true;}return Selected;}public virtual void OnSelect(){}public virtual string GetAttribute(string a){if(Attributes.ContainsKey(a)){return Attributes[a];}else if(a=="flowdirection"&&Attributes.ContainsKey("flow")){return Attributes["flow"];}return null;}public virtual void SetAttribute(string a,string b){if(a=="selectable"){bool c=b=="true";if(Selectable!=c){Selectable=c;if(Parent!=null){Parent.UpdateSelectability(this);}}}else if(a=="activated"){bool d=b=="true";Activated=d;}else if(a=="inputbinding"){HasUserInputBindings=true;if(Parent!=null){Parent.HasUserInputBindings=true;}}else if(a=="flow"){if(b=="horizontal"){}else{}RerenderRequired=true;}else if(a=="align"){switch(b){case "right":break;case "center":break;default:break;}RerenderRequired=true;}else if(a=="width"){int e;if(Int32.TryParse(b,out e)){}}Attributes[a]=b;}public XMLParentNode RetrieveRoot(){XMLParentNode a=this;while(a.GetParent()!=null){a=a.GetParent();}return a;}public void KeyPress(string a){OnKeyPressed(a);if(Parent!=null&&!PreventDefaults.Contains(a)){Parent.KeyPress(a);}}public virtual void OnKeyPressed(string a){switch(a){case "ACTIVATE":ToggleActivation();break;default:break;}}public virtual void ToggleActivation(){Activated=!Activated;}public void PreventDefault(string a){if(!PreventDefaults.Contains(a)){PreventDefaults.Add(a);}}public void AllowDefault(string a){if(PreventDefaults.Contains(a)){PreventDefaults.Remove(a);}}public void FollowRoute(Route a){if(Parent!=null){Parent.FollowRoute(a);}}public virtual Dictionary<string,string>GetValues(Func<XMLTree,bool>a){Dictionary<string,string>b=new
Dictionary<string,string>();string c=GetAttribute("name");string d=GetAttribute("value");if(c!=null&&d!=null){b[c]=d;}Dictionary<string,string>e;foreach(XMLTree child in Children){e=child.GetValues(a);foreach(string key in e.Keys){if(!b.ContainsKey(key)){b[key]=e[key];}}}return b;}public void DetachChild(XMLTree a){Children.Remove(a);RerenderRequired=true;}public void Detach(){if(GetParent()!=null){GetParent().DetachChild(this);}}public virtual string Render(int a,int b){RenderBox c=GetRenderBox(a,b);string d=c.Render(a,b);return d;}public string Render(){return Render(-1,-1);}}public interface XMLParentNode{bool HasUserInputBindings{get;set;}XMLParentNode GetParent();void UpdateSelectability(XMLTree a);void KeyPress(string a);void FollowRoute(Route a);bool SelectNext();void DetachChild(XMLTree a);}public class TextNode:XMLTree{public string Content;public TextNode(string a):base(){Type="textnode";Content=a;Content.Replace("\n","");Content=Content.Trim(new char[]{'\n',' ','\r'});RerenderRequired=true;}public override RenderBox GetRenderBox(int a,int b){RenderBox c=new RenderBoxLeaf(Content);c.type=Type;return c;}}public class Route{static public Dictionary<string,Action<string,UIController>>RouteHandlers=new Dictionary<string,Action<string,UIController>>{{"revert",(d,e)=>{e.RevertUI();}},{"xml",(d,e)=>{XMLTree f=XML.ParseXML(Parser.UnescapeQuotes(d));e.LoadUI(f);}},{"fn",(d,e)=>{if(UIFactories.ContainsKey(d)){UIFactories[d](e);}}}};static Dictionary<string,Action<UIController>>UIFactories=new Dictionary<string,Action<UIController>>();string Definition;public Route(string a){Definition=a;}public void Follow(UIController a){using(Logger b=new Logger("Route.Follow(UIController)",Logger.Mode.LOG)){b.log("route def: "+Definition,Logger.Mode.LOG);string[]c=Definition.Split(new char[]{':'},2);if(Route.RouteHandlers.ContainsKey(c[0].ToLower())){Route.RouteHandlers[c[0].ToLower()](c.Length>=2?c[1]:null,a);}else{b.log("route not understood.",Logger.Mode.WARNING);}}}static public void RegisterRouteFunction(string a,Action<UIController>b){UIFactories[a]=b;}}public class UIController:XMLParentNode{public XMLTree ui;public Stack<XMLTree>UIStack;public string Type;bool UserInputActive;IMyTerminalBlock UserInputSource;TextInputMode UserInputMode;List<XMLTree>UserInputBindings;string InputDataCache;public bool HasUserInputBindings{get{return UserInputActive&&UserInputSource!=null&&UserInputBindings.Count>0;}set{}}public enum TextInputMode{PUBLIC_TEXT,CUSTOM_DATA}public enum FONT{Debug,Red,Green,Blue,White,DarkBlue,UrlNormal,UrlHighlight,ErrorMessageBoxCaption,ErrorMessageBoxText,InfoMessageBoxCaption,InfoMessageBoxText,ScreenCaption,GameCredits,LoadingScreen,BuildInfo,BuildInfoHighlight,Monospace,MONO=Monospace,DEFAULT=Debug}Dictionary<FONT,long>Fonts=new Dictionary<FONT,long>{{FONT.Debug,151057691},{FONT.Red,-795103743},{FONT.Green,-161094011},{FONT.Blue,1920284339},{FONT.White,48665683},{FONT.DarkBlue,1919824171},{FONT.UrlNormal,992097699},{FONT.UrlHighlight,-807552222},{FONT.ErrorMessageBoxCaption,1458347610},{FONT.ErrorMessageBoxText,895781166},{FONT.InfoMessageBoxCaption,837834442},{FONT.InfoMessageBoxText,1833612699},{FONT.ScreenCaption,1216738022},{FONT.GameCredits,-1859174863},{FONT.LoadingScreen,741958017},{FONT.BuildInfo,1184185815},{FONT.BuildInfoHighlight,-270950170},{FONT.Monospace,1147350002}};public UIController(XMLTree a){Type="CTRL";UIStack=new Stack<XMLTree>();UserInputBindings=new List<XMLTree>();UserInputActive=false;InputDataCache="";ui=a;ui.SetParent(this);if(GetSelectedFont()==Fonts[FONT.MONO])TextUtils.SelectFont(TextUtils.FONT.MONOSPACE);else TextUtils.SelectFont(TextUtils.FONT.DEFAULT);if(GetSelectedNode()==null&&ui.IsSelectable()){ui.SelectFirst();}CollectUserInputBindings();}public static UIController FromXML(string a){XMLTree b=XML.ParseXML(a);return new UIController(b);}public void ApplyScreenProperties(IMyTextPanel a){if(ui.GetAttribute("fontcolor")!=null){string b=ui.GetAttribute("fontcolor");b="FF"+b.Substring(b.Length-2,2)+b.Substring(b.Length-4,2)+b.Substring(b.Length-6,2);Color c=new Color(uint.Parse(b,System.Globalization.NumberStyles.AllowHexSpecifier));a.SetValue<Color>("FontColor",c);}if(ui.GetAttribute("fontsize")!=null){a.SetValue<Single>("FontSize",Single.Parse(ui.GetAttribute("fontsize")));}if(ui.GetAttribute("backgroundcolor")!=null){string b=ui.GetAttribute("backgroundcolor");b="FF"+b.Substring(b.Length-2,2)+b.Substring(b.Length-4,2)+b.Substring(b.Length-6,2);Color c=new Color(uint.Parse(b,System.Globalization.NumberStyles.AllowHexSpecifier));a.SetValue<Color>("BackgroundColor",c);}a.SetValue<long>("Font",GetSelectedFont());}public void Call(List<string>a){switch(a[0]){case "key":XMLTree b=GetSelectedNode();if(b!=null){b.KeyPress(a[1].ToUpper());}break;case "refresh":string c=ui.GetAttribute("refresh");if(c!=null){FollowRoute(new Route(c));}UpdateUserInput();break;case "revert":RevertUI();break;default:break;}return;}public void LoadXML(string a){LoadUI(XML.ParseXML(a));}public void LoadUI(XMLTree a){if(ui.GetAttribute("historydisabled")==null||ui.GetAttribute("historydisabled")!="true"){UIStack.Push(ui);}if(a.GetAttribute("revert")!=null&&a.GetAttribute("revert")=="true"){RevertUI();}else{ui=a;ui.SetParent(this);}UserInputBindings=new List<XMLTree>();CollectUserInputBindings();}public void ClearUIStack(){UIStack=new Stack<XMLTree>();}public void RevertUI(){if(UIStack.Count==0){return;}ui=UIStack.Pop();ui.SetParent(this);}public string Render(){if(GetSelectedFont()==Fonts[FONT.MONO])TextUtils.SelectFont(TextUtils.FONT.MONOSPACE);else TextUtils.SelectFont(TextUtils.FONT.DEFAULT);return ui.Render(-1,-1);}public void RenderTo(IMyTextPanel a){int b=-1;string c=a.BlockDefinition.SubtypeId;if(c=="LargeTextPanel"||c=="SmallTextPanel"){b=658;}else if(c=="LargeLCDPanel"||c=="SmallLCDPanel"){b=658;}else if(c=="SmallLCDPanelWide"||c=="LargeLCDPanelWide"){b=1316;}else if(c=="LargeBlockCorner_LCD_1"||c=="LargeBlockCorner_LCD_2"||c=="SmallBlockCorner_LCD_1"||c=="SmallBlockCorner_LCD_2"){}else if(c=="LargeBlockCorner_LCD_Flat_1"||c=="LargeBlockCorner_LCD_Flat_2"||c=="SmallBlockCorner_LCD_Flat_1"||c=="SmallBlockCorner_LCD_Flat_2"){}int d=b==-1?-1:(int)(((float)b)/a.GetValue<Single>("FontSize"));int e=20;ApplyScreenProperties(a);using(new Logger("RENDERING...",Logger.Mode.LOG)){string f=ui.Render(d,e);a.WritePublicText(f);}}public long GetSelectedFont(){string a=ui.GetAttribute("fontfamily");if(a!=null){FONT b;long c;if(long.TryParse(a,out c)){return c;}else if(Enum.TryParse<FONT>(a,out b)){return Fonts.GetValueOrDefault(b,-1);}}return-1;}public void KeyPress(string a){switch(a){case "LEFT/ABORT":RevertUI();break;}}public XMLTree GetSelectedNode(){XMLTree a=ui.GetSelectedSibling();return a;}public XMLTree GetNode(Func<XMLTree,bool>a){return ui.GetNode(a);}public List<XMLTree>GetAllNodes(Func<XMLTree,bool>a){return ui.GetAllNodes(a);}public void UpdateSelectability(XMLTree a){}public void FollowRoute(Route a){a.Follow(this);}public XMLParentNode GetParent(){return null;}public Dictionary<string,string>GetValues(){return GetValues(a=>true);}public Dictionary<string,string>GetValues(Func<XMLTree,bool>a){if(ui==null){return null;}return ui.GetValues(a);}public string GetPackedValues(Func<XMLTree,bool>a){return Parser.PackData(GetValues(a)).ToString();}public void DetachChild(XMLTree a){if(a==ui){ui=null;}}public string GetPackedValues(){return GetPackedValues(a=>true);}public bool SelectNext(){return ui.SelectNext();}public void SetUserInputSource(IMyTerminalBlock a,TextInputMode b){if(b==TextInputMode.PUBLIC_TEXT&&(a as IMyTextPanel)==null){throw new Exception("Only Text Panels can be used as user input if PUBLIC_TEXT mode is selected!");}UserInputSource=a;UserInputMode=b;}public void EnableUserInput(){UserInputActive=true;}public void DisableUserInput(){UserInputActive=false;}public void RegisterInputBinding(XMLTree a){UserInputBindings.Add(a);}public bool UpdateUserInput(){using(new Logger("UIController.RefreshUserInput()",Logger.Mode.LOG)){if(!UserInputActive||UserInputSource==null){return false;}string a=null;switch(UserInputMode){case TextInputMode.CUSTOM_DATA:a=UserInputSource.CustomData;break;case TextInputMode.PUBLIC_TEXT:a=(UserInputSource as IMyTextPanel).GetPublicText();break;}bool b=true;if(a==null||a==InputDataCache){b=false;}string c;string d;foreach(XMLTree node in UserInputBindings){c=node.GetAttribute("inputbinding");if(c!=null){d=node.GetAttribute(c.ToLower());if(!b&&d!=null&&d!=InputDataCache){a=d;b=true;}else if(b){node.SetAttribute(c.ToLower(),a);}}}if(b){InputDataCache=a;}switch(UserInputMode){case TextInputMode.CUSTOM_DATA:if(UserInputSource!=null){UserInputSource.CustomData=InputDataCache;}break;case TextInputMode.PUBLIC_TEXT:(UserInputSource as IMyTextPanel).WritePublicText(InputDataCache);break;}return b;}}private void CollectUserInputBindings(){using(Logger a=new Logger("UIController.CollectUserInputBindings()",Logger.Mode.LOG)){XMLTree b;Queue<XMLParentNode>c=new Queue<XMLParentNode>();c.Enqueue(ui);while(c.Count!=0){b=c.Dequeue()as XMLTree;if(!b.HasUserInputBindings){a.log("node has no userinputbindings",Logger.Mode.LOG);}if(b!=null&&b.HasUserInputBindings){a.log("Checking "+b.Type+" node...",Logger.Mode.LOG);for(int d=0;d<b.NumberOfChildren;d++){c.Enqueue(b.GetChild(d));}if(b.GetAttribute("inputbinding")!=null){RegisterInputBinding(b);}}}}}}public abstract class UIFactory{private int Count;private int Max;private List<UIController>UIs;public UIFactory():this(null){}public UIFactory(List<UIController>a){if(a==null){UIs=new List<UIController>();}UIs=a;}public abstract XMLTree Render(UIController a);protected void UpdateUIs(XMLTree a){foreach(UIController ui in UIs){ui.LoadUI(a);}}}public class Generic:XMLTree{public Generic(string a):base(){Type=a.ToLower();}}public class Menu:XMLTree{public Menu():base(){Type="menu";}public override void AddChild(XMLTree a){if(a.Type!="menuitem"&&a.IsSelectable()){throw new Exception(
"ERROR: Only children of type <menupoint> or children that are not selectable are allowed!"+" (type was: <"+a.Type+">)");}base.AddChild(a);}public override Dictionary<string,string>GetValues(Func<XMLTree,bool>a){Dictionary<string,string>b=base.GetValues(a);string c=GetAttribute("name");string d=GetChild(SelectedChild).GetAttribute("value");if(a(this)&&IsSelected()&&c!=null&&d!=null){b[c]=d;}return b;}public override RenderBox GetRenderBox(int a,int b){using(new Logger("Menu.GetRenderBox(int, int)")){RenderBoxLeaf c=new RenderBoxLeaf();c.MinHeight=1;c.type=Type+"_prefix";RenderBoxLeaf d=new RenderBoxLeaf(">> ");d.type=Type+"_prefixSelected";int e=d.MinWidth;c.MaxWidth=e;c.MinWidth=e;d.MaxWidth=e;RenderBoxTree f=new RenderBoxTree();UpdateRenderCacheProperties(f,a,b);f.type=Type;RenderBoxTree g;foreach(XMLTree child in Children){g=new RenderBoxTree();g.type=Type+"_menupoint";g.Flow=RenderBox.FlowDirection.HORIZONTAL;if(child.IsSelected()){g.Add(d);}else{g.Add(c);}RenderBox h=child.GetRenderBox(a,b);g.Add(h);f.Add(g);}return f;}}}public class MenuItem:XMLTree{Route TargetRoute;public MenuItem():this(null){}public MenuItem(Route a):base(){Type="menuitem";Selectable=true;SetRoute(a);PreventDefault("RIGHT/SUBMIT");}public override void SetAttribute(string a,string b){switch(a){case "route":SetRoute(new Route(b));if(TargetRoute==null){}else{}break;default:base.SetAttribute(a,b);break;}}public override void OnKeyPressed(string a){using(Logger b=new Logger("MenuItem.OnKeyPressed(string)",Logger.Mode.LOG)){switch(a){case "RIGHT/SUBMIT":if(TargetRoute!=null){FollowRoute(TargetRoute);}else{b.log("target route is null!",Logger.Mode.WARNING);}break;}base.OnKeyPressed(a);}}public void SetRoute(Route a){TargetRoute=a;}}public class ProgressBar:XMLTree{RenderBox emptyBar;RenderBox filledBar;float StepSize{get{float a;if(!Single.TryParse(GetAttribute("stepsize"),out a)){return 0.1f;}return a;}set{string b=Math.Max(0.001f,Math.Min(0.009f,value)).ToString();if(b.Length>5){b+=b.Substring(0,5);}SetAttribute("stepsize",b);}}public float FillLevel{get{float a;if(!Single.TryParse(GetAttribute("value"),out a)){return 0.0f;}if(a<0||a>1)return 0.0f;return a;}set{string b=Math.Max(0f,Math.Min(1f,value)).ToString();if(b.Length>5){b=b.Substring(0,5);}SetAttribute("value",b);}}public ProgressBar():this(0f){}public ProgressBar(float a):this(a,false){}public ProgressBar(float a,bool b):base(){Type="progressbar";PreventDefault("LEFT/ABORT");PreventDefault("RIGHT/SUBMIT");SetAttribute("width","500");SetAttribute("filledstring","|");SetAttribute("emptystring","'");SetAttribute("value",a.ToString());SetAttribute("stepsize","0.05");SetAttribute("selectable",b?"true":"false");}public void IncreaseFillLevel(){FillLevel+=StepSize;}public void DecreaseFillLevel(){FillLevel-=StepSize;}public override void OnKeyPressed(string a){switch(a){case "LEFT/ABORT":DecreaseFillLevel();break;case "RIGHT/SUBMIT":IncreaseFillLevel();break;}base.OnKeyPressed(a);}public override RenderBox GetRenderBox(int a,int b){RenderBoxTree c=new RenderBoxTree();c.type=Type;int d=TextUtils.GetTextWidth(IsSelected()?"<[]>":" [] ")+2;RenderBox e=new RenderBoxLeaf((IsSelected()?"<":" ")+"[");e.MaxWidth=e.MinWidth;RenderBox f=new RenderBoxLeaf("]"+(IsSelected()?">":" "));f.MaxWidth=f.MinWidth;c.Add(e);filledBar=new RenderBoxLeaf();filledBar.PadChar=GetAttribute("filledstring")[0];filledBar.MinHeight=1;c.Add(filledBar);emptyBar=new RenderBoxLeaf();emptyBar.MinHeight=1;emptyBar.PadChar=GetAttribute("emptystring")[0];c.Add(emptyBar);c.Add(f);int g=ResolveSize(GetAttribute("minwidth"),a);if(g>=d){filledBar.MinWidth=(int)((g-d)*FillLevel);emptyBar.MinWidth=(int)((g-d)*(1-FillLevel));}g=ResolveSize(GetAttribute("maxwidth"),a);if(g>=d){filledBar.MaxWidth=(int)((g-d)*FillLevel);emptyBar.MaxWidth=(int)((g-d)*(1-FillLevel));}g=ResolveSize(GetAttribute("width"),a);if(g>=d){filledBar.DesiredWidth=(int)((g-d)*FillLevel);emptyBar.DesiredWidth=(int)((g-d)*(1-FillLevel));}g=ResolveSize(GetAttribute("forcewidth"),a);if(g>=d){int h=(int)((g-d)*FillLevel);filledBar.MaxWidth=h;filledBar.MinWidth=h;h=(int)((g-d)*(1-FillLevel));emptyBar.MinWidth=h;emptyBar.MaxWidth=h;}UpdateRenderCacheProperties(c,a,b);c.Flow=RenderBox.FlowDirection.HORIZONTAL;switch(GetAttribute("alignself")){case "right":c.Align=RenderBox.TextAlign.RIGHT;break;case "center":c.Align=RenderBox.TextAlign.CENTER;break;default:c.Align=RenderBox.TextAlign.LEFT;break;}return c;}}public class HorizontalLine:XMLTree{public HorizontalLine():base(){Type="hl";SetAttribute("width","100%");SetAttribute("minheight","1");SetAttribute("maxheight","1");}public override RenderBox GetRenderBox(int a,int b){RenderBox c=new RenderBoxLeaf();c.type=Type;c.PadChar='_';UpdateRenderCacheProperties(c,a,b);return c;}}public class VerticalLine:XMLTree{public VerticalLine():base(){Type="vl";SetAttribute("height","100%");}public override RenderBox GetRenderBox(int a,int b){RenderBox c=new RenderBoxLeaf();c.PadChar='|';c.type=Type;UpdateRenderCacheProperties(c,a,b);c.MinWidth=TextUtils.GetCharWidth('|');return c;}}public class UIControls:XMLTree{UIController Controller;public UIControls():base(){Type="uicontrols";Controller=null;SetAttribute("selectable","false");}private void UpdateController(){Controller=RetrieveRoot()as UIController;SetAttribute("selectable",(Controller!=null&&Controller.UIStack.Count>0)?"true":"false");if(IsSelectable()){PreventDefault("LEFT/ABORT");PreventDefault("RIGHT/SUBMIT");}else{AllowDefault("LEFT/ABORT");AllowDefault("RIGHT/SUBMIT");}GetParent().UpdateSelectability(this);if(IsSelected()&&!IsSelectable()){GetParent().SelectNext();}}public override void OnKeyPressed(string a){if(Controller==null){UpdateController();}switch(a){case "LEFT/ABORT":case "RIGHT/SUBMIT":if(Controller!=null&&Controller.UIStack.Count>0){Controller.RevertUI();}break;}}public override RenderBox GetRenderBox(int a,int b){RenderBoxTree c=new RenderBoxTree();c.type=Type;if(Controller==null){UpdateController();}if(IsSelectable()){RenderBox d=new RenderBoxLeaf(IsSelected()?new StringBuilder("<<"):TextUtils.CreateStringOfLength(' ',TextUtils.GetTextWidth("<<")));d.MaxWidth=d.MinWidth;c.Add(d);}RenderBoxTree e=new RenderBoxTree();e.Flow=GetAttribute("flow")=="horizontal"?RenderBox.FlowDirection.HORIZONTAL:RenderBox.FlowDirection.VERTICAL;foreach(XMLTree child in Children){e.Add(child.GetRenderBox(a,b));}c.Add(e);UpdateRenderCacheProperties(c,a,b);c.Flow=RenderBox.FlowDirection.HORIZONTAL;return c;}}public class TextInput:XMLTree{int CursorPosition;public TextInput(){Type="textinput";Selectable=true;CursorPosition=-1;PreventDefault("LEFT/ABORT");PreventDefault("RIGHT/SUBMIT");SetAttribute("maxlength","10");SetAttribute("value","");SetAttribute("allowedchars"," a-z0-9");}public override void OnKeyPressed(string a){switch(a){case "LEFT/ABORT":DecreaseCursorPosition();break;case "RIGHT/SUBMIT":IncreaseCursorPosition();break;case "UP":DecreaseLetter();break;case "DOWN":IncreaseLetter();break;default:base.OnKeyPressed(a);break;}}public override void SetAttribute(string a,string b){if(a=="allowedchars"){if(!System.Text.RegularExpressions.Regex.IsMatch(b,@"([^-\\]-[^-\\]|[^-\\]|\\-|\\\\)*")){throw new Exception("Invalid format of allowed characters!");}}if(a=="value")using(new Logger("set value: "+b)){}base.SetAttribute(a,b);}private void IncreaseLetter(){if(CursorPosition==-1){return;}char[]a=GetAttribute("value").ToCharArray();char b=a[CursorPosition];string[]c=GetAllowedCharSets();for(int d=0;d<c.Length;d++){if((c[d].Length==1&&c[d][0]==a[CursorPosition])||(c[d].Length==3&&c[d][2]==a[CursorPosition])){a[CursorPosition]=c[(d+1)%c.Length][0];SetAttribute("value",new string(a));return;}}a[CursorPosition]=(char)(((int)a[CursorPosition])+1);SetAttribute("value",new string(a));}private void DecreaseLetter(){if(CursorPosition==-1){return;}char[]a=GetAttribute("value").ToCharArray();char[]b=GetAttribute("allowedchars").ToCharArray();string[]c=GetAllowedCharSets();for(int d=0;d<c.Length;d++){if(c[d][0]==a[CursorPosition]){int e=(d==0?c.Length-1:d-1);a[CursorPosition]=c[e][c[e].Length-1];SetAttribute("value",new string(a));return;}}a[CursorPosition]=(char)(((int)a[CursorPosition])-1);SetAttribute("value",new string(a));}private string[]GetAllowedCharSets(){string a=GetAttribute("allowedchars");System.Text.RegularExpressions.MatchCollection b=System.Text.RegularExpressions.Regex.Matches(a,@"[^-\\]-[^-\\]|[^-\\]|\\-|\\\\");string[]c=new string[b.Count];int d=0;foreach(System.Text.RegularExpressions.Match match in b){string e=match.ToString();if(e=="\\-"){c[d]="-";}else if(e=="\\\\"){c[d]="\\";}else{c[d]=e;}d++;}return c;}private void IncreaseCursorPosition(){if(CursorPosition<Single.Parse(GetAttribute("maxlength"))-1){CursorPosition++;}else{CursorPosition=0;DecreaseCursorPosition();KeyPress("DOWN");}if(CursorPosition!=-1){PreventDefault("UP");PreventDefault("DOWN");}if(CursorPosition>=GetAttribute("value").Length){string[]a=GetAllowedCharSets();SetAttribute("value",GetAttribute("value")+a[0][0]);}}private void DecreaseCursorPosition(){if(CursorPosition>-1){CursorPosition--;}if(CursorPosition==-1){AllowDefault("UP");AllowDefault("DOWN");}}public override RenderBox GetRenderBox(int a,int b){using(Logger c=new Logger("TextInput.GetRenderCache(int)",Logger.Mode.LOG)){RenderBoxTree d=new RenderBoxTree();UpdateRenderCacheProperties(d,a,b);RenderBoxLeaf e=new RenderBoxLeaf();d.type=Type;d.Flow=RenderBox.FlowDirection.HORIZONTAL;d.Add(e);e.Add((IsSelected()?new string(new char[]{(char)187}):" ")+" ");e.MinWidth=TextUtils.GetTextWidth(new string(new char[]{(char)187,' '}));string f=GetAttribute("value");c.log("value: "+f,Logger.Mode.LOG);if(CursorPosition!=-1){e.Add(f.Substring(0,CursorPosition));e.Add("|");e.Add(f.Substring(CursorPosition,1));e.Add("|");e.Add(f.Substring(CursorPosition+1));}else{if(f.Length==0)e.Add("_");e.Add(f);}c.log("height: "+d.GetActualHeight(b),Logger.Mode.LOG);return d;}}}public abstract class DataStore:XMLTree{public DataStore():base(){}public override Dictionary<string,string
>GetValues(Func<XMLTree,bool>a){Dictionary<string,string>b=base.GetValues(a);if(!a(this)){return b;}foreach(KeyValuePair<string,string>data in Attributes){if(!b.ContainsKey(data.Key)){b[data.Key]=data.Value;}}return b;}}public class SubmitButton:MenuItem{public SubmitButton(){Type="submitbutton";SetAttribute("flowdirection","horizontal");}public override RenderBox GetRenderBox(int a,int b){RenderBoxTree c=new RenderBoxTree();c.type=Type;RenderBoxLeaf d=new RenderBoxLeaf(IsSelected()?"[[  ":"[   ");d.MaxWidth=d.MinWidth;c.Add(d);RenderBoxTree e=new RenderBoxTree();e.Flow=GetAttribute("flow")=="horizontal"?RenderBox.FlowDirection.HORIZONTAL:RenderBox.FlowDirection.VERTICAL;foreach(XMLTree child in Children){e.Add(child.GetRenderBox(a,b));}c.Add(e);d=new RenderBoxLeaf(IsSelected()?"  ]]":"   ]");d.MaxWidth=d.MinWidth;c.Add(d);UpdateRenderCacheProperties(c,a,b);c.Flow=RenderBox.FlowDirection.HORIZONTAL;return c;}}public class Break:TextNode{public Break():base(""){Type="br";}public override RenderBox GetRenderBox(int a,int b){RenderBox c=new RenderBoxLeaf("\n");c.type=Type;c.MaxHeight=(GetParent()as XMLTree).GetAttribute("flow")=="horizontal"?1:0;c.MaxWidth=0;return c;}}public class Space:XMLTree{public Space():base(){Type="space";SetAttribute("width","0");}public override RenderBox GetRenderBox(int a,int b){RenderBox c=new RenderBoxLeaf();c.type=Type;c.MinHeight=1;int d=ResolveSize(GetAttribute("width"),a);c.MinWidth=d;c.MaxWidth=d;return c;}}public class Hidden:XMLTree{public Hidden():base(){Type="hidden";}public override RenderBox GetRenderBox(int a,int b){RenderBox c=new RenderBoxTree();c.type=Type;c.MaxWidth=0;c.MaxHeight=0;return c;}}public class HiddenData:DataStore{public HiddenData():base(){Type="hiddendata";}public override RenderBox GetRenderBox(int a,int b){RenderBox c=new RenderBoxTree();c.type=Type;c.MaxWidth=0;c.MaxHeight=0;return c;}}class r:Hidden{public r():base(){Type="meta";}public override Dictionary<string,string>GetValues(Func<XMLTree,bool>a){if(a(this)){return Attributes;}else{return new Dictionary<string,string>();}}public override void SetAttribute(string a,string b){long c;if(a.ToLower()=="fontfamily"&&long.TryParse(b,out c)){if(c==1147350002)TextUtils.SelectFont(TextUtils.FONT.MONOSPACE);else TextUtils.SelectFont(TextUtils.FONT.DEFAULT);}base.SetAttribute(a,b);}}public abstract class RenderBox{protected bool minHeightIsCached;protected bool minWidthIsCached;protected int minHeightCache;protected int minWidthCache;public bool DEBUG=false;public char PadChar;public enum TextAlign{LEFT,RIGHT,CENTER}public enum FlowDirection{HORIZONTAL,VERTICAL}public abstract void Add(string a);public abstract void Add(StringBuilder a);public abstract void AddAt(int a,string b);public abstract void AddAt(int a,StringBuilder b);public abstract StringBuilder GetLine(int a);public abstract StringBuilder GetLine(int a,int b,int c);public abstract void Clear();private RenderBox.FlowDirection _Flow;private RenderBox.TextAlign _Align;protected int _MinWidth;protected int _MaxWidth;protected int _DesiredWidth;protected int _MinHeight;protected int _MaxHeight;protected int _DesiredHeight;public RenderBox Parent;public string type;public int GetActualWidth(int a){using(Logger b=new Logger("RenderBox.GetActualWidth(int)",Logger.Mode.LOG)){b.log("Type: "+type,Logger.Mode.LOG);if(this as RenderBoxLeaf!=null)b.log("content: |"+(this as RenderBoxLeaf).Content+"|",Logger.Mode.LOG);b.log("implicit max width: "+a,Logger.Mode.LOG);b.log("explicit max width: "+MaxWidth,Logger.Mode.LOG);b.log("min width: "+MinWidth,Logger.Mode.LOG);b.log("desired width: "+DesiredWidth,Logger.Mode.LOG);if(MaxWidth!=-1)a=(a==-1?MaxWidth:Math.Min(MaxWidth,a));if(a==-1){return Math.Max(MinWidth,DesiredWidth);}else{int c;if(DesiredWidth==-1){c=Math.Min(MinWidth,a);}else{c=Math.Max(MinWidth,DesiredWidth);}b.log("actual width: "+Math.Min(c,a),Logger.Mode.LOG);return Math.Min(c,a);}}}public int GetActualHeight(int a){using(Logger b=new Logger("RenderBox.GetActualHeight(int)",Logger.Mode.LOG)){b.log("Type: "+type,Logger.Mode.LOG);if(MaxHeight!=-1)a=(a==-1?MaxHeight:Math.Min(MaxHeight,a));if(a==-1){return DesiredHeight==-1?MinHeight:Math.Min(MinHeight,DesiredHeight);}else{int c=DesiredHeight==-1?MinHeight:Math.Max(MinHeight,DesiredHeight);b.log("actual height: "+Math.Min(c,a)+" (min( "+c+", "+a+")",Logger.Mode.LOG);return Math.Min(c,a);}}}public RenderBox.TextAlign Align{get{return _Align;}set{_Align=value;}}public virtual RenderBox.FlowDirection Flow{get{return _Flow;}set{_Flow=value;ClearCache();}}public virtual int MinWidth{get{return _MinWidth;}set{_MinWidth=Math.Max(0,value);ClearCache();}}public int DesiredWidth{get{return _DesiredWidth;}set{_DesiredWidth=value;}}public int MaxWidth{get{return _MaxWidth;}set{_MaxWidth=value;}}public virtual int MinHeight{get{return _MinHeight;}set{_MinHeight=Math.Max(0,value);ClearCache();}}public int DesiredHeight{get{return _DesiredHeight;}set{_DesiredHeight=value;}}public int MaxHeight{get{return _MaxHeight;}set{_MaxHeight=value;ClearCache();}}public RenderBox(){PadChar=' ';_Flow=RenderBox.FlowDirection.VERTICAL;_Align=RenderBox.TextAlign.LEFT;_MinWidth=0;_MaxWidth=-1;_DesiredWidth=-1;_MinHeight=0;_MaxHeight=-1;_DesiredHeight=-1;minHeightIsCached=false;minWidthIsCached=false;}public IEnumerable<StringBuilder>GetLines(int a,int b){int c=GetActualHeight(b);for(int d=0;d<c;d++){yield return GetLine(d,a,b);}}public IEnumerable<StringBuilder>GetLines(){int a=GetActualHeight(-1);for(int b=0;b<a;b++){yield return GetLine(b,-1,-1);}}protected void AlignLine(ref StringBuilder a){AlignLine(ref a,-1);}protected void AlignLine(ref StringBuilder a,int b){int c=GetActualWidth(b);int d=c-TextUtils.GetTextWidth(a.ToString());if(d>0){switch(Align){case TextAlign.CENTER:a=TextUtils.PadText(a.ToString(),c,TextUtils.PadMode.BOTH,PadChar);break;case TextAlign.RIGHT:a=TextUtils.PadText(a.ToString(),c,TextUtils.PadMode.LEFT,PadChar);break;default:a=TextUtils.PadText(a.ToString(),c,TextUtils.PadMode.RIGHT,PadChar);break;}}else if(d<0){a=new StringBuilder(a.ToString());while(d<0){d+=TextUtils.GetTextWidth(new string(new char[]{a[a.Length-1]}))+1;a.Remove(a.Length-1,1);}}else{}}public string Render(int a,int b){StringBuilder c=new StringBuilder();int d=0;foreach(StringBuilder line in GetLines(a,b)){c.Append(line);c.Append("\n");}if(c.Length>0)c.Remove(c.Length-1,1);return c.ToString();}public void ClearCache(){minHeightIsCached=false;minWidthIsCached=false;if(Parent!=null)Parent.ClearCache();}}public class RenderBoxLeaf:RenderBox{public string Content;public override RenderBox.FlowDirection Flow{get{return RenderBox.FlowDirection.VERTICAL;}set{}}public override int MinHeight{get{if(minHeightIsCached&&false)return minHeightCache;if(Content.Length>0){minHeightCache=Math.Max(_MinHeight,1);}else{minHeightCache=_MinHeight;}if(MaxHeight!=-1){minHeightCache=Math.Min(minHeightCache,MaxHeight);}minHeightIsCached=true;return minHeightCache;}set{_MinHeight=value;ClearCache();}}public override int MinWidth{get{if(minWidthIsCached&&false)return minWidthCache;minWidthCache=MinHeight==0?0:Math.Max(TextUtils.GetTextWidth(Content),_MinWidth);minWidthIsCached=true;return minWidthCache;}set{_MinWidth=value;ClearCache();}}public RenderBoxLeaf(){Content="";ClearCache();}public RenderBoxLeaf(StringBuilder a):this(){Add(a);}public RenderBoxLeaf(string a):this(new StringBuilder(a)){}public override void AddAt(int a,StringBuilder b){if(a==0){Content=b.ToString()+Content;}else{Content+=b;}ClearCache();}public override void Add(StringBuilder a){AddAt(1,a);}public override void AddAt(int a,string b){AddAt(a,new StringBuilder(b));}public override void Add(string a){Add(new StringBuilder(a));}public override StringBuilder GetLine(int a){return GetLine(a,-1,-1);}public override StringBuilder GetLine(int a,int b,int c){StringBuilder d;if(a==0){d=new StringBuilder(Content.ToString());}else{d=new StringBuilder();}AlignLine(ref d,b);return d;}public override void Clear(){Content="";ClearCache();}}public class RenderBoxTree:RenderBox{List<RenderBox>Boxes;public RenderBox this[int a]{get{return Boxes[a];}set{Boxes[a]=value;}}public int Count{get{return Boxes.Count;}}public override int MinHeight{get{if(minHeightIsCached)return minHeightCache;int a=0;int b;foreach(RenderBox box in Boxes){if(Flow==RenderBox.FlowDirection.HORIZONTAL){a=Math.Max(a,box.MinHeight);}else{b=box.MinHeight;if(b>0){a+=b;}}}minHeightCache=Math.Max(0,Math.Max(_MinHeight,a));minHeightIsCached=true;return minHeightCache;}}public override int MinWidth{get{if(minWidthIsCached)return minWidthCache;int a=(Flow==RenderBox.FlowDirection.HORIZONTAL?0:_MinWidth);int b;foreach(RenderBox box in Boxes){if(Flow==RenderBox.FlowDirection.HORIZONTAL){b=box.MinWidth;if(b>0){a++;a+=b;}}else{a=Math.Max(box.MinWidth,a);}}if(Flow==RenderBox.FlowDirection.HORIZONTAL)a=Math.Max(_MinWidth,a-1);minWidthCache=Math.Max(a,0);minWidthIsCached=true;return minWidthCache;}}public RenderBoxTree():base(){Boxes=new List<RenderBox>();}public override void Add(string a){AddAt(Boxes.Count,a);}public override void AddAt(int a,string b){AddAt(a,new RenderBoxLeaf(b));}public override void Add(StringBuilder a){AddAt(Boxes.Count,a);}public override void AddAt(int a,StringBuilder b){AddAt(a,new RenderBoxLeaf(b));}public void AddAt(int a,RenderBox b){Boxes.AddOrInsert<RenderBox>(b,a);b.Parent=this;ClearCache();}public void Add(RenderBox a){AddAt(Boxes.Count,a);}public override StringBuilder GetLine(int a){return GetLine(a,-1,-1);}public override StringBuilder GetLine(int a,int b,int c){StringBuilder d=new StringBuilder();int e=Math.Min(c,MaxHeight);if(e!=-1)e=Math.Max(e-MinHeight,0)-1;int f;int g;int h;if(Flow==RenderBox.FlowDirection.VERTICAL){foreach(RenderBox box in Boxes){f=box.MinHeight;h=e+f+1;g=box.GetActualHeight(h);if(a<g){d=box.GetLine(a,b,h);break;}else{a-=g;if(e!=-1)e=Math.Max(0,e-g+f);}}}else{int i;if(b!=-1)i=(MaxWidth==-1)?b:Math.Min(b,MaxWidth);else i=MaxWidth;if(i!=-1)i=Math.Max(i-MinWidth,0)-1;StringBuilder j;int k;foreach(
RenderBox box in Boxes){k=box.MinWidth;j=box.GetLine(a,1+i+k,c);if(i!=-1)i=Math.Max(0,i-TextUtils.GetTextWidth(j.ToString())+k);d.Append(j);}}AlignLine(ref d,b);return d;}public override void Clear(){Boxes.Clear();ClearCache();}}}public static class TextUtils{public enum FONT{DEFAULT,MONOSPACE,}public static bool DEBUG=true;private static FONT selectedFont=FONT.DEFAULT;private static Dictionary<char,int>LetterWidths=new Dictionary<char,int>{{' ',8},{'!',8},{'"',10},{'#',19},{'$',20},{'%',24},{'&',20},{'\'',6},{'(',9},{')',9},{'*',11},{'+',18},{',',9},{'-',10},{'.',9},{'/',14},{'0',19},{'1',9},{'2',19},{'3',17},{'4',19},{'5',19},{'6',19},{'7',16},{'8',19},{'9',19},{':',9},{';',9},{'<',18},{'=',18},{'>',18},{'?',16},{'@',25},{'A',21},{'B',21},{'C',19},{'D',21},{'E',18},{'F',17},{'G',20},{'H',20},{'I',8},{'J',16},{'K',17},{'L',15},{'M',26},{'N',21},{'O',21},{'P',20},{'Q',21},{'R',21},{'S',21},{'T',17},{'U',20},{'V',20},{'W',31},{'X',19},{'Y',20},{'Z',19},{'[',9},{'\\',12},{']',9},{'^',18},{'_',15},{'`',8},{'a',17},{'b',17},{'c',16},{'d',17},{'e',17},{'f',9},{'g',17},{'h',17},{'i',8},{'j',8},{'k',17},{'l',8},{'m',27},{'n',17},{'o',17},{'p',17},{'q',17},{'r',10},{'s',17},{'t',9},{'u',17},{'v',15},{'w',27},{'x',15},{'y',17},{'z',16},{'{',9},{'|',6},{'}',9},{'~',18},{' ',8},{'¡',8},{'¢',16},{'£',17},{'¤',19},{'¥',19},{'¦',6},{'§',20},{'¨',8},{'©',25},{'ª',10},{'«',15},{'¬',18},{'­',10},{'®',25},{'¯',8},{'°',12},{'±',18},{'²',11},{'³',11},{'´',8},{'µ',17},{'¶',18},{'·',9},{'¸',8},{'¹',11},{'º',10},{'»',15},{'¼',27},{'½',29},{'¾',28},{'¿',16},{'À',21},{'Á',21},{'Â',21},{'Ã',21},{'Ä',21},{'Å',21},{'Æ',31},{'Ç',19},{'È',18},{'É',18},{'Ê',18},{'Ë',18},{'Ì',8},{'Í',8},{'Î',8},{'Ï',8},{'Ð',21},{'Ñ',21},{'Ò',21},{'Ó',21},{'Ô',21},{'Õ',21},{'Ö',21},{'×',18},{'Ø',21},{'Ù',20},{'Ú',20},{'Û',20},{'Ü',20},{'Ý',17},{'Þ',20},{'ß',19},{'à',17},{'á',17},{'â',17},{'ã',17},{'ä',17},{'å',17},{'æ',28},{'ç',16},{'è',17},{'é',17},{'ê',17},{'ë',17},{'ì',8},{'í',8},{'î',8},{'ï',8},{'ð',17},{'ñ',17},{'ò',17},{'ó',17},{'ô',17},{'õ',17},{'ö',17},{'÷',18},{'ø',17},{'ù',17},{'ú',17},{'û',17},{'ü',17},{'ý',17},{'þ',17},{'ÿ',17},{'Ā',20},{'ā',17},{'Ă',21},{'ă',17},{'Ą',21},{'ą',17},{'Ć',19},{'ć',16},{'Ĉ',19},{'ĉ',16},{'Ċ',19},{'ċ',16},{'Č',19},{'č',16},{'Ď',21},{'ď',17},{'Đ',21},{'đ',17},{'Ē',18},{'ē',17},{'Ĕ',18},{'ĕ',17},{'Ė',18},{'ė',17},{'Ę',18},{'ę',17},{'Ě',18},{'ě',17},{'Ĝ',20},{'ĝ',17},{'Ğ',20},{'ğ',17},{'Ġ',20},{'ġ',17},{'Ģ',20},{'ģ',17},{'Ĥ',20},{'ĥ',17},{'Ħ',20},{'ħ',17},{'Ĩ',8},{'ĩ',8},{'Ī',8},{'ī',8},{'Į',8},{'į',8},{'İ',8},{'ı',8},{'Ĳ',24},{'ĳ',14},{'Ĵ',16},{'ĵ',8},{'Ķ',17},{'ķ',17},{'Ĺ',15},{'ĺ',8},{'Ļ',15},{'ļ',8},{'Ľ',15},{'ľ',8},{'Ŀ',15},{'ŀ',10},{'Ł',15},{'ł',8},{'Ń',21},{'ń',17},{'Ņ',21},{'ņ',17},{'Ň',21},{'ň',17},{'ŉ',17},{'Ō',21},{'ō',17},{'Ŏ',21},{'ŏ',17},{'Ő',21},{'ő',17},{'Œ',31},{'œ',28},{'Ŕ',21},{'ŕ',10},{'Ŗ',21},{'ŗ',10},{'Ř',21},{'ř',10},{'Ś',21},{'ś',17},{'Ŝ',21},{'ŝ',17},{'Ş',21},{'ş',17},{'Š',21},{'š',17},{'Ţ',17},{'ţ',9},{'Ť',17},{'ť',9},{'Ŧ',17},{'ŧ',9},{'Ũ',20},{'ũ',17},{'Ū',20},{'ū',17},{'Ŭ',20},{'ŭ',17},{'Ů',20},{'ů',17},{'Ű',20},{'ű',17},{'Ų',20},{'ų',17},{'Ŵ',31},{'ŵ',27},{'Ŷ',17},{'ŷ',17},{'Ÿ',17},{'Ź',19},{'ź',16},{'Ż',19},{'ż',16},{'Ž',19},{'ž',16},{'ƒ',19},{'Ș',21},{'ș',17},{'Ț',17},{'ț',9},{'ˆ',8},{'ˇ',8},{'ˉ',6},{'˘',8},{'˙',8},{'˚',8},{'˛',8},{'˜',8},{'˝',8},{'Ё',19},{'Ѓ',16},{'Є',18},{'Ѕ',21},{'І',8},{'Ї',8},{'Ј',16},{'Љ',28},{'Њ',21},{'Ќ',19},{'Ў',17},{'Џ',18},{'А',19},{'Б',19},{'В',19},{'Г',15},{'Д',19},{'Е',18},{'Ж',21},{'З',17},{'И',19},{'Й',19},{'К',17},{'Л',17},{'М',26},{'Н',18},{'О',20},{'П',19},{'Р',19},{'С',19},{'Т',19},{'У',19},{'Ф',20},{'Х',19},{'Ц',20},{'Ч',16},{'Ш',26},{'Щ',29},{'Ъ',20},{'Ы',24},{'Ь',19},{'Э',18},{'Ю',27},{'Я',20},{'а',16},{'б',17},{'в',16},{'г',15},{'д',17},{'е',17},{'ж',20},{'з',15},{'и',16},{'й',16},{'к',17},{'л',15},{'м',25},{'н',16},{'о',16},{'п',16},{'р',17},{'с',16},{'т',14},{'у',17},{'ф',21},{'х',15},{'ц',17},{'ч',15},{'ш',25},{'щ',27},{'ъ',16},{'ы',20},{'ь',16},{'э',14},{'ю',23},{'я',17},{'ё',17},{'ђ',17},{'ѓ',16},{'є',14},{'ѕ',16},{'і',8},{'ї',8},{'ј',7},{'љ',22},{'њ',25},{'ћ',17},{'ќ',16},{'ў',17},{'џ',17},{'Ґ',15},{'ґ',13},{'–',15},{'—',31},{'‘',6},{'’',6},{'‚',6},{'“',12},{'”',12},{'„',12},{'†',20},{'‡',20},{'•',15},{'…',31},{'‰',31},{'‹',8},{'›',8},{'€',19},{'™',30},{'−',18},{'∙',8},{'□',21},{'',40},{'',40},{'',40},{'',40},{'',41},{'',41},{'',32},{'',32},{'',40},{'',40},{'',34},{'',34},{'',40},{'',40},{'',40},{'',41},{'',32},{'',41},{'',32},{'',40},{'',40},{'',40},{'',40},{'',40},{'',40},{'',40},{'',40}};public enum PadMode{LEFT,RIGHT,BOTH,}public enum RoundMode{FLOOR,CEIL,}public static void SelectFont(FONT a){selectedFont=a;}public static void Reset(){selectedFont=FONT.DEFAULT;}public static int GetCharWidth(char a){if(selectedFont==FONT.MONOSPACE){return 24;}int b=0;if(LetterWidths.ContainsKey(a))return LetterWidths[a];return 8;}public static int GetTextWidth(string a){return GetTextWidth(a,0,a.Length);}public static int GetTextWidth(string a,int b,int c){string[]d=a.Substring(b,c).Split('\n');if(b+c>a.Length){throw new Exception("ERROR: stringbuilder slice exceeds the stringbuilders length!");}a=a.Replace("\r","");int e=0;int f=0;foreach(string line in d){if(selectedFont==FONT.MONOSPACE){f=(line.Length*25);}else{f=line.Select(g=>LetterWidths.GetValueOrDefault(g,6)).Sum()+line.Length;}e=Math.Max(f-1,e);f=0;}return Math.Max(e,f-1);}public static StringBuilder CreateStringOfLength(char a,int b){return CreateStringOfLength(a,b,RoundMode.FLOOR);}public static StringBuilder CreateStringOfLength(char a,int b,RoundMode c){int d=GetCharWidth(a);if(c==RoundMode.CEIL){b+=d;}StringBuilder e=new StringBuilder();if(b<d){return new StringBuilder();}int f=(b+1)/(d+1);return new StringBuilder(new string(a,f));}public static StringBuilder PadText(string a,int b,PadMode c){return PadText(a,b,c,' ');}public static StringBuilder PadText(string a,int b,PadMode c,char d){string[]e=a.Split('\n');StringBuilder f=new StringBuilder();StringBuilder g=new StringBuilder();int h;int i;int j=-1;foreach(string line in e){h=GetTextWidth(line)+1;if(c==PadMode.BOTH){g=CreateStringOfLength(d,(b-h)/2);f.Append(g);f.Append(line);f.Append(g);}else{g=CreateStringOfLength(d,b-h);if(c==PadMode.LEFT){f.Append(g);f.Append(line);}else{f.Append(line);f.Append(g);}}f.Append("\n");}if(f.Length>0)f.Remove(f.Length-1,1);return f;}}public static class Parser{public static string PackData(Dictionary<string,string>a){StringBuilder b=new StringBuilder();foreach(string key in a.Keys){b.Append(key+"=\""+a[key]+"\" ");}return b.ToString();}public static string Sanitize(string a){return a.Replace("\"","\\\"").Replace("'","\\'");}public static string UnescapeQuotes(string a){return a.Replace("\\\"","\"").Replace("\\'","'");}public static int GetNextUnescaped(char[]a,string b){return GetNextUnescaped(a,b,0);}public static int GetNextUnescaped(char[]a,string b,int c){return GetNextUnescaped(a,b,c,b.Length-c);}public static int GetNextUnescaped(char[]a,string b,int c,int d){int e=c+d-1;int f=b.IndexOfAny(a,c,e-c+1);while(f>0&&b[f-1]=='\\'){f=b.IndexOfAny(a,f+1,e-f);}return f;}public static int GetNextOutsideQuotes(char a,string b){return GetNextOutsideQuotes(new char[]{a},b);}public static int GetNextOutsideQuotes(char a,string b,bool c){return GetNextOutsideQuotes(new char[]{a},b,c);}public static int GetNextOutsideQuotes(char[]a,string b){return GetNextOutsideQuotes(a,b,true);}public static int GetNextOutsideQuotes(char[]a,string b,bool c){char[]d=new char[]{'\'','"'};int e=-1;int f=-1;int g;while(e==-1){if(c){g=GetNextUnescaped(d,b,f+1);}else{g=b.IndexOfAny(d,f+1);}if(g==-1){e=GetNextUnescaped(a,b,f+1);}else{e=GetNextUnescaped(a,b,f+1,g-f-1);if(e!=-1){}if(c){f=GetNextUnescaped(new char[]{b[g]},b,g+1);}else{f=b.IndexOf(b[g],g+1);}}}return e;}public static List<String>ParamString2List(string a){a=a.Trim()+" ";List<string>b=new List<string>();char[]c=new char[]{'\'','"'};int d=-1;while(d!=a.Length-1){a=a.Substring(d+1);d=Parser.GetNextOutsideQuotes(new char[]{' ','\n'},a);b.Add(a.Substring(0,d).Trim(c));}return b;}public static Dictionary<string,string>GetXMLAttributes(string a){Dictionary<string,string>b=new Dictionary<string,string>();char[]c=new char[]{'\'','"'};List<string>d=ParamString2List(a);int e;foreach(string attribute in d){e=attribute.IndexOf('=');if(e==-1){b[attribute.Substring(0).ToLower()]="true";}else{b[attribute.Substring(0,e).ToLower()]=attribute.Substring(e+1).Trim(c);}}return b;}}public class Logger:IDisposable{public enum Mode{DEBUG,LOG,ERROR,WARNING,CONSOLE,}private static StringBuilder Log=new StringBuilder();static public bool DEBUG=false;protected static StringBuilder Prefix=new StringBuilder();protected Program Prog;protected Mode logMode;private bool disposed;public static string Output{get{return Log.ToString();}}public Logger(string a):this(a,Mode.DEBUG){}public Logger(string a,Mode b):this(a,b,null){}public Logger(string a,Mode b,Program c){disposed=false;if(!DEBUG&&b==Mode.DEBUG)return;Prog=c;logMode=b;log(a,logMode);IncLvl();}public void log(string a,Mode b){log(new StringBuilder(a),b);}public void log(StringBuilder a,Mode b){StringBuilder c=new StringBuilder().Append(Prefix);if(logMode!=Mode.LOG&&logMode!=Mode.CONSOLE)c.Append(logMode.ToString()).Append(": ");c.Append(a);Log.Append(c).Append("\n");if(logMode==Mode.CONSOLE){if(Prog!=null)Prog.Echo(c.ToString());}}private void IncLvl(){Prefix.Append("  ");}private void DecLvl(){if(Prefix.Length>=2)Prefix.Remove(Prefix.Length-2,2);}public virtual void Dispose(){if(!disposed){DecLvl();}disposed=true;}public static void Clear(){Log=new StringBuilder();}}public class DataStorage:XML.DataStore{private Dictionary<string,Type>String2Type;private Dictionary<Type,string>Type2String;private Dictionary<string,string>StringEntries;private Dictionary<string,int>IntegerEntries;private Dictionary<string,float>FloatEntries;private static DataStorage Instance;private DataStorage():base(){String2Type=new Dictionary<string,Type
>{{"string",typeof(String)},{"int",typeof(int)},{"float",typeof(float)}};Type2String=new Dictionary<Type,string>{{typeof(String),"string"},{typeof(int),"int"},{typeof(float),"float"}};Type="data";Attributes=new Dictionary<string,string>();StringEntries=new Dictionary<string,string>();IntegerEntries=new Dictionary<string,int>();FloatEntries=new Dictionary<string,float>();}public static DataStorage GetInstance(){if(Instance==null){Instance=new DataStorage();}return Instance;}public void Save(out string a){UpdateAttributes();DataStorage.SetUp();a="<data "+Parser.PackData(GetValues(b=>true))+"/>";}private void UpdateAttributes(){foreach(KeyValuePair<string,string>entry in StringEntries){Attributes[entry.Key]="string:"+entry.Value;}foreach(KeyValuePair<string,int>entry in IntegerEntries){Attributes[entry.Key]="int:"+entry.Value.ToString();}foreach(KeyValuePair<string,float>entry in FloatEntries){Attributes[entry.Key]="float:"+entry.Value.ToString();}}public static DataStorage Load(string a){DataStorage.SetUp();XML.XMLTree b=XML.ParseXML(a);if(b!=null){DataStorage c=b.GetNode(d=>d.Type=="data")as DataStorage;if(c!=null){Instance=c;}}return DataStorage.GetInstance();}public void Set<T>(string a,T b){Type c=GetEntryType(a);if(c!=null&&c!=typeof(T)){throw new Exception("ERROR: An entry for key '"+a+"' does already exist, but is of type '"+c.ToString()+"'!");}if(typeof(T)==typeof(string)){StringEntries[a]=(string)(object)b;}else if(typeof(T)==typeof(int)){IntegerEntries[a]=(int)(object)b;}else if(typeof(T)==typeof(float)){FloatEntries[a]=(float)(object)b;}}public Type GetEntryType(string a){if(StringEntries.ContainsKey(a)){return typeof(string);}else if(IntegerEntries.ContainsKey(a)){return typeof(int);}else if(FloatEntries.ContainsKey(a)){return typeof(float);}else{return null;}}public T Get<T>(string a){if(!Exists1<T>(a)){throw new Exception("No entry found for key '"+a+"' of type '"+typeof(T).ToString()+"'!");}if(typeof(T)==typeof(string)){return(T)(object)StringEntries[a];}else if(typeof(T)==typeof(int)){return(T)(object)IntegerEntries[a];}else if(typeof(T)==typeof(float)){return(T)(object)FloatEntries[a];}else{throw new Exception("Error: Invalid Type at DataStore.Get<Type>(string key)!");}}public bool Exists(string a){return(Exists1<string>(a)||Exists1<int>(a)||Exists1<float>(a));}public bool Exists1<T>(string a){if(typeof(T)==typeof(string)){return StringEntries.ContainsKey(a);}else if(typeof(T)==typeof(int)){return IntegerEntries.ContainsKey(a);}else if(typeof(T)==typeof(float)){return FloatEntries.ContainsKey(a);}return false;}public List<string>GetKeys(){List<string>a=new List<string>(StringEntries.Keys.Count+IntegerEntries.Keys.Count+FloatEntries.Keys.Count);a.AddRange(StringEntries.Keys);a.AddRange(IntegerEntries.Keys);a.AddRange(FloatEntries.Keys);return a;}public static void SetUp(){if(!XML.NodeRegister.ContainsKey("data")){XML.NodeRegister.Add("data",()=>DataStorage.GetInstance());}}public override void SetAttribute(string a,string b){if(StringEntries==null||IntegerEntries==null||FloatEntries==null){base.SetAttribute(a,b);return;}Type c=typeof(string);string[]d=b.Split(':');if(d.Length>1&&String2Type.ContainsKey(d[0])){c=String2Type[d[0]];d[0]="";b=String.Join(":",d).Substring(1);}if(c==typeof(string)){Set(a,b);}else if(c==typeof(int)){int e;if(Int32.TryParse(b,out e)){Set(a,e);}}else if(c==typeof(float)){float f;if(Single.TryParse(b,out f)){Set(a,f);}}}}public class MAN{public class GridPlatformAgent:PlatformAgent{List<IMyLaserAntenna>LaserAntennas;List<IMyRadioAntenna>RadioAntennas;public GridPlatformAgent(MyGridProgram a,List<IMyTerminalBlock>b):base(a){LaserAntennas=new List<IMyLaserAntenna>();RadioAntennas=new List<IMyRadioAntenna>();foreach(IMyTerminalBlock antenna in b){IMyLaserAntenna c=antenna as IMyLaserAntenna;IMyRadioAntenna d=antenna as IMyRadioAntenna;if(c!=null){LaserAntennas.Add(c);}else if(d!=null){RadioAntennas.Add(d);}}Id=GenerateId(a.Me);a.Me.CustomName=Id.Name;}public override AgentId GenerateId(IMyProgrammableBlock a){if(!Id.Name.Contains("GridMaster")){a.CustomName="GridMaster";return base.GenerateId(a);}else{return Id;}}public override bool SendMessage(ref AgentMessage a){bool b=base.SendMessage(ref a);if(a.Receiver.Platform=="ALL"||!b){return SendToGrid(a)||b;}return true;}public bool SendToGrid(AgentMessage a){if(a.Receiver.Platform==Id.Platform||a.Receiver.Platform=="local"){return false;}if(a.Receiver.Platform=="ALL"||a.Receiver.Platform=="ANY"){a.Receiver=new AgentId(a.Receiver.Name+"@local");}foreach(IMyRadioAntenna antenna in RadioAntennas){if(antenna.TransmitMessage("message \""+a.ToString()+"\"",MyTransmitTarget.Everyone)){return true;}}ScheduleMessage(a);if(ScheduledMessages.Count>0){ScheduleRefresh();}return true;}}public class PlatformAgent:Agent{public int RefreshInterval;public ServiceRegister PlatformServices;public List<IMyTextPanel>ReceptionBuffers;public PlatformAgent(MyGridProgram a):base(a){PlatformServices=new ServiceRegister();ReceptionBuffers=new List<IMyTextPanel>();RefreshInterval=500;DataStorage b=DataStorage.Load(a.Storage??"");if(b.Exists<string>("id")){Id=new AgentId(b.Get<string>("id"));List<IMyTerminalBlock>c=new List<IMyTerminalBlock>();GTS.SearchBlocksOfName("RBUFFER-"+Id.Name,c);foreach(IMyTerminalBlock buffer in c){IMyTextPanel d=buffer as IMyTextPanel;if(d!=null){ReceptionBuffers.Add(d);}}}else{Id=GenerateId(a.Me);}a.Me.CustomName=Id.Name;new n.Platform(this).Setup();new o(this).Setup();}public void RegisterBuffers(List<string>a){foreach(string name in a){IMyTextPanel b=GTS.GetBlockWithName(name)as IMyTextPanel;if(b!=null){b.CustomName="RBUFFER-"+Id.Name;b.WritePublicText("");b.CustomData="";ReceptionBuffers.Add(b);}}}public void CollectPlatformMessages(){foreach(IMyTextPanel buffer in ReceptionBuffers){string a=buffer.CustomData;buffer.CustomData="";List<XML.XMLTree>b=XML.ParseXML(Parser.UnescapeQuotes(a)).GetAllNodes(c=>c.Type=="message");foreach(XML.XMLTree message in b){ReceiveMessage((AgentMessage)message);}}}public override void ReceiveMessage(AgentMessage a){if(a.Receiver.Platform==Id.Name){a.Receiver.Platform="local";}AgentMessage.StatusCodes b=AssignMessage(a);ReceiveMessage(a,b);}public override void ReceiveMessage(AgentMessage a,AgentMessage.StatusCodes b){if(a.Receiver.Platform=="local"){a.Receiver.Platform=Id.Platform;}bool c=false;if(b==AgentMessage.StatusCodes.RECEIVERNOTFOUND||b==AgentMessage.StatusCodes.PLATFORMNOTFOUND){if(a.Service!=null&&PlatformServices.ContainsKey(a.Service)){if(a.Receiver.MatchesPlatform(Id)){if(PlatformServices.ContainsKey(a.Service)){List<PlatformService>d=PlatformServices[a.Service].FindAll(e=>a.Receiver.Matches(e.Provider)&&a.Sender!=e.Provider);if(a.Receiver.Name=="ALL"){foreach(PlatformService pService in d){AgentMessage f=a.Duplicate();f.Receiver=pService.Provider;c|=SendMessage(ref f);}}else{if(d.ElementAtOrDefault(0)!=null){a.Receiver=d[0].Provider;c=SendMessage(ref a);}}}}}if(!c){base.ReceiveMessage(a,b);}}else{base.ReceiveMessage(a,b);}}public override bool SendMessage(ref AgentMessage a){if(base.SendMessage(ref a)){return true;}else if(a.Sender.Platform=="local"){a.Sender.Platform=Id.Name;}if(a.Receiver.Platform!=Id.Name){return SendToPlatform(a,a.Receiver.Platform);}else{return false;}}public bool SendToPlatform(AgentMessage a,string b){if(b=="ALL"||b=="ANY"){List<IMyTerminalBlock>c=new List<IMyTerminalBlock>();GTS.SearchBlocksOfName("RBUFFER-",c,d=>(d.CustomName!="RBUFFER-"+Id.Name&&(d as IMyTextPanel)!=null));bool e=false;foreach(IMyTerminalBlock buffer in c){string f=buffer.CustomName.Replace("RBUFFER-","");if(f!=Id.Name){if(SendToPlatform(a,f)){e=true;if(b=="ANY"){return true;}}}}return e;}else{IMyTextPanel g=GTS.GetBlockWithName("RBUFFER-"+b)as IMyTextPanel;if(g==null){return false;}else{g.CustomData+=a.ToString();return true;}}}public static string GenerateSuffix(){const string a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";Random b=new Random();char[]c=new char[8];for(int d=0;d<8;d++){c[d]=a[b.Next(0,a.Length)];}return new string(c);}public override void Refresh(TimeSpan a){bool b=RefreshScheduled||(ElapsedTime.Milliseconds+a.Milliseconds>=RefreshInterval);RefreshScheduled=b;if(Timer!=null){if(RefreshInterval<1000){Timer.GetActionWithName("TriggerNow").Apply(Timer);}else{Timer.GetActionWithName("Start").Apply(Timer);}}base.Refresh(a);if(!b){return;}CollectPlatformMessages();}public virtual AgentId GenerateId(IMyProgrammableBlock a){System.Text.RegularExpressions.Regex b=new System.Text.RegularExpressions.Regex(@"-{.*}$");string c;if(b.IsMatch(a.CustomName)){c=b.Replace(a.CustomName,"-{"+PlatformAgent.GenerateSuffix()+"}");}else{c=a.CustomName+"-{"+PlatformAgent.GenerateSuffix()+"}";}return new AgentId(c+"@"+c);}}public class Agent{protected IMyTimerBlock Timer;protected TimeSpan ElapsedTimeValue;public TimeSpan ElapsedTime{get{return ElapsedTimeValue;}}protected bool RefreshScheduled;public AgentId Id;public MyGridProgram Prog;public IMyGridTerminalSystem GTS{get{return Prog.GridTerminalSystem;}}public Dictionary<string,Service>Services;protected Dictionary<int,AgentProtocol>Chats;protected List<AgentMessage>ScheduledMessages;protected Dictionary<string,List<AgentProtocol>>EventListeners;protected Dictionary<string,object>Knowledge;public Agent(MyGridProgram a){DataStorage b=DataStorage.Load(a.Storage??"");Prog=a;ElapsedTimeValue=new TimeSpan(0);Timer=null;if(b.Exists<string>("id")){Id=new AgentId(b.Get<string>("id"));}else{Id=new AgentId(a.Me.CustomName+"@local");}Knowledge=new Dictionary<string,object>();Services=new Dictionary<string,Service>();Chats=new Dictionary<int,AgentProtocol>();ScheduledMessages=new List<AgentMessage>();EventListeners=new Dictionary<string,List<AgentProtocol>>();new PrintProtocol(this).Setup();}public void Save(out string a){DataStorage b=DataStorage.GetInstance();b.Set<string>("id",Id.ToString());b.Save(out a);}public void SetKnowledgeEntry(string a,object b,AgentProtocol c){SetKnowledgeEntry(a,b,c,false);}public void SetKnowledgeEntry(
string a,object b,AgentProtocol c,bool d){string e=d?a:c.GetProtocolId()+"_"+a;Knowledge[e]=b;}public object GetKnowledgeEntry(string a,AgentProtocol b){return GetKnowledgeEntry(a,b,false);}public object GetKnowledgeEntry(string a,AgentProtocol b,bool c){string d=c?a:b.GetProtocolId()+"_"+a;return Knowledge.GetValueOrDefault(d,null);}public void OnEvent(string a,AgentProtocol b){if(!EventListeners.ContainsKey(a)){EventListeners[a]=new List<AgentProtocol>();}EventListeners[a].Add(b);}public void Event(string a){if(!EventListeners.ContainsKey(a)){return;}for(int b=EventListeners[a].Count-1;b>=0;b--){if(EventListeners[a][b]==null){EventListeners[a].RemoveAt(b);}else{EventListeners[a][b].NotifyEvent(a);}}}public virtual void ReceiveMessage(AgentMessage a){AgentMessage.StatusCodes b=AssignMessage(a);ReceiveMessage(a,b);}public virtual void ReceiveMessage(AgentMessage a,AgentMessage.StatusCodes b){if(Id.MatchesPlatform(a.Receiver)&&a.Receiver.Name=="ALL"){AgentMessage c=a.Duplicate();SendMessage(ref c);}if(b==AgentMessage.StatusCodes.UNKNOWNERROR){return;}else if(b==AgentMessage.StatusCodes.RECEIVERNOTFOUND||b==AgentMessage.StatusCodes.PLATFORMNOTFOUND||b==AgentMessage.StatusCodes.SERVICENOTFOUND||b==AgentMessage.StatusCodes.CHATNOTFOUND){if(Id.MatchesPlatform(a.Receiver)&&a.Receiver.Name=="ANY"){SendMessage(ref a);}else{AgentMessage c=a.Duplicate();if(!((b==AgentMessage.StatusCodes.RECEIVERNOTFOUND||b==AgentMessage.StatusCodes.PLATFORMNOTFOUND)&&SendMessage(ref c))){c=a.MakeResponse(this.Id,b,"");SendMessage(ref c);}if(b==AgentMessage.StatusCodes.RECEIVERNOTFOUND||b==AgentMessage.StatusCodes.PLATFORMNOTFOUND){}else if(b==AgentMessage.StatusCodes.CHATNOTFOUND){}else if(b==AgentMessage.StatusCodes.SERVICENOTFOUND){}}}else if(b==AgentMessage.StatusCodes.CHATIDNOTACCEPTED){AgentMessage d=a.MakeResponse(Id,b,"validId:"+AgentProtocol.ChatCount.ToString());SendMessage(ref d);}}protected virtual AgentMessage.StatusCodes AssignMessage(AgentMessage a){if(!Id.MatchesPlatform(a.Receiver)){return AgentMessage.StatusCodes.PLATFORMNOTFOUND;}else if(!Id.MatchesName(a.Receiver)){return AgentMessage.StatusCodes.RECEIVERNOTFOUND;}else if(a.Service=="response"){if(!Chats.ContainsKey(a.ReceiverChatId)){if(a.Status!=AgentMessage.StatusCodes.UNKNOWNERROR&&a.Status!=AgentMessage.StatusCodes.CHATNOTFOUND&&a.Status!=AgentMessage.StatusCodes.SERVICENOTFOUND){return AgentMessage.StatusCodes.ABORT;}return AgentMessage.StatusCodes.CHATNOTFOUND;}else{Chats[a.ReceiverChatId].ReceiveMessage(a);return AgentMessage.StatusCodes.OK;}}else if(!Services.ContainsKey(a.Service)){if(a.Status==AgentMessage.StatusCodes.CHATNOTFOUND){return AgentMessage.StatusCodes.ABORT;}else if(a.Status==AgentMessage.StatusCodes.SERVICENOTFOUND){return AgentMessage.StatusCodes.ABORT;}else if(a.Status==AgentMessage.StatusCodes.SERVICENOTFOUND){return AgentMessage.StatusCodes.ABORT;}else{return AgentMessage.StatusCodes.SERVICENOTFOUND;}}else{AgentProtocol b=Services[a.Service].Create(this);if(a.ReceiverChatId!=-1){if(!b.TrySetId(a.ReceiverChatId)){b.Stop();return AgentMessage.StatusCodes.CHATIDNOTACCEPTED;}}AddChat(b);b.ReceiveMessage(a);return AgentMessage.StatusCodes.OK;}}public virtual bool SendMessage(ref AgentMessage a){using(Logger b=new Logger("Agent.SendMessage(ref AgentMessage)",Logger.Mode.LOG)){IMyProgrammableBlock c=null;if(a.Receiver==Id){ReceiveMessage(a);}else if(a.Receiver.Name!=Id.Name&&(a.Receiver.Platform=="local"||a.Receiver.Platform==Id.Platform)){c=GTS.GetBlockWithName(a.Receiver.Name)as IMyProgrammableBlock;if(c==null){}}else{c=GTS.GetBlockWithName(a.Receiver.Platform)as IMyProgrammableBlock;if(c==null){if(Id.Platform!=Id.Name){c=GTS.GetBlockWithName(Id.Platform)as IMyProgrammableBlock;}if(c==null){}}}if(c==null){return false;}if(a.Receiver.Platform=="local"&&a.Sender.Platform==Id.Platform){a.Sender.Platform="local";}b.log("Message: "+a.ToXML(),Logger.Mode.LOG);if(!c.TryRun("message \""+a.ToString()+"\"")){ScheduleMessage(a);}return true;}}public void ScheduleMessage(AgentMessage a){ScheduledMessages.Add(a);ScheduleRefresh();}public void SendScheduledMessages(){for(int a=ScheduledMessages.Count-1;a>=0;a--){AgentMessage b=ScheduledMessages[a];ScheduledMessages.RemoveAt(a);SendMessage(ref b);}}public void RegisterService(string a,Func<Agent,AgentProtocol>b){RegisterService(a,b,new Dictionary<string,string>());}public void RegisterService(string a,Func<Agent,AgentProtocol>b,Dictionary<string,string>c){Services.Add(a,new Service(a,(c.GetValueOrDefault("description")as String)??"",this.Id,new AgentId(c.GetValueOrDefault("permissions","ANY@ANY")),c.ContainsKey("providesui")&&c["providesui"]!="false",b));}public bool AddChat(AgentProtocol a){if(Chats.ContainsKey(a.ChatId)){return false;}else{Chats[a.ChatId]=a;return true;}}public bool UpdateChatId(int a,int b){if(!Chats.ContainsKey(a)||Chats.ContainsKey(b)){return false;}else{Chats[b]=Chats[a];Chats.Remove(a);return true;}}public void StopChat(int a){if(Chats.ContainsKey(a)){StopChat(Chats[a]);}}public void StopChat(AgentProtocol a){foreach(KeyValuePair<string,List<AgentProtocol>>listeners in EventListeners){for(int b=listeners.Value.Count-1;b>=0;b--){if(listeners.Value[b]==a){listeners.Value.RemoveAt(b);}}}Chats.Remove(a.ChatId);}public void SetTimer(IMyTimerBlock a){Timer=a;}public void ScheduleRefresh(){RefreshScheduled=true;if(Timer!=null&&!Timer.IsCountingDown){Timer.GetActionWithName("Start").Apply(Timer);}}public virtual void Refresh(TimeSpan a){ElapsedTimeValue+=a;if(!RefreshScheduled){return;}RefreshScheduled=false;SendScheduledMessages();Event("refresh");ElapsedTimeValue=new TimeSpan(0);}}public abstract class AgentProtocol{static int ChatCountValue;private int ChatIdValue;private int PartnerIdValue;protected Agent Holder;public int TTL;public static int ChatCount{get{return ChatCountValue;}}public int ChatId{get{return ChatIdValue;}}public int PartnerId{get{return PartnerIdValue;}}public abstract string GetProtocolId();public virtual void NotifyEvent(string a){}public AgentProtocol(Agent a){ChatIdValue=ChatCount;ChatCountValue++;Holder=a;}public bool TrySetId(int a){if(a==ChatId){return true;}else if(a>=ChatCount){ChatCountValue=a+1;ChatIdValue=a;return true;}else{return false;}}public abstract void Restart();public virtual void Start(){}public virtual void Stop(){if(ChatId==ChatCount-1){ChatCountValue=ChatId;}Holder.StopChat(ChatId);}public virtual void ReceiveMessage(AgentMessage a){if(a.Status==AgentMessage.StatusCodes.CHATIDNOTACCEPTED){string[]b=a.Content.Split(':');if(b.Length==2&&b[0]=="validId"){int c=ChatId;int d=-1;if(!Int32.TryParse(b[1],out d)){Stop();}else{d=Math.Max(ChatCount,d);if(Holder.UpdateChatId(c,d)&&TrySetId(d)){Restart();}else{Stop();}}}}}public static string MakeRoute(AgentId a,string b,string c){return "man:"+a+"::"+b+"("+Parser.Sanitize(c)+")";}public virtual void Setup(){}}public class AgentMessage:XML.DataStore{public enum StatusCodes{UNDEFINED,OK,CHATNOTFOUND,SERVICENOTFOUND,UNKNOWNERROR,ABORT,FORWARDED,RECEIVERNOTFOUND,PLATFORMNOTFOUND,CHATIDNOTACCEPTED}public enum Interfaces{UI,TEXT}public string Content{get{return Parser.UnescapeQuotes(GetAttribute("content"));}set{SetAttribute("content",Parser.Sanitize(value));}}public AgentId Sender{get{return new AgentId(GetAttribute("sender"));}set{SetAttribute("sender",value.ToString());}}public AgentId Receiver{get{return new AgentId(GetAttribute("receiver"));}set{SetAttribute("receiver",value.ToString());}}public int SenderChatId{get{int a;if(Int32.TryParse(GetAttribute("senderchatid"),out a)){return a;}else{return-1;}}set{SetAttribute("senderchatid",value.ToString());}}public int ReceiverChatId{get{int a;if(Int32.TryParse(GetAttribute("receiverchatid"),out a)){return a;}else{return-1;}}set{SetAttribute("receiverchatid",value.ToString());}}public string Service{get{return GetAttribute("service");}set{SetAttribute("service",value);}}public StatusCodes Status{get{StatusCodes a;if(Enum.TryParse<StatusCodes>(GetAttribute("status"),true,out a)){return a;}else{return StatusCodes.UNDEFINED;}}set{SetAttribute("status",value.ToString());}}public Interfaces TargetInterface{get{Interfaces a;if(Enum.TryParse<Interfaces>(GetAttribute("targetinterface"),true,out a)){return a;}else{return Interfaces.TEXT;}}set{SetAttribute("targetinterface",value.ToString());}}public AgentMessage():base(){Type="message";Attributes=new Dictionary<string,string>();Content="";Status=StatusCodes.OK;Service="response";TargetInterface=Interfaces.TEXT;}public AgentMessage(AgentId a,AgentId b,string c):this(){Content=c;Sender=a;Receiver=b;Status=StatusCodes.OK;Service="response";TargetInterface=Interfaces.TEXT;}public AgentMessage(AgentId a,AgentId b,StatusCodes c,string d,string e,int f):this(a,b,c,d,e,f,-1){}public AgentMessage(AgentId a,AgentId b,StatusCodes c,string d,string e,int f,int g):this(a,b,d){Status=c;Service=e;SenderChatId=f;ReceiverChatId=g;TargetInterface=Interfaces.TEXT;}public AgentMessage(AgentId a,AgentId b,StatusCodes c,string d,string e):this(a,b,c,d,e,-1){}public AgentMessage MakeResponse(AgentId a,StatusCodes b,string c){AgentMessage d=new AgentMessage(a,Sender,b,c,"response");d.SenderChatId=ReceiverChatId;d.ReceiverChatId=SenderChatId;return d;}public AgentMessage Duplicate(){AgentMessage a=new AgentMessage(Sender,Receiver,Status,Content,Service,SenderChatId,ReceiverChatId);a.TargetInterface=TargetInterface;return a;}public override string ToString(){return ToXML();}public string ToXML(){string a="<message ";a+=Parser.PackData(GetValues(b=>true));a+="/>";return Parser.Sanitize(a);}public static AgentMessage FromXML(string a){SetUp();a=Parser.UnescapeQuotes(a);XML.XMLTree b=XML.ParseXML(a);AgentMessage c=b.GetNode(d=>d.Type=="message")as AgentMessage;return c;}public static void SetUp(){if(!XML.NodeRegister.ContainsKey("message")){XML.NodeRegister.Add("message",()=>{return new AgentMessage();});}}}public class AgentId:IEquatable<AgentId>{private string Id;public string Name{get{string[]a=Id.Split('@');return a[0];}set{string[]a=Id.Split('@');
string b=(a.Length>1?a[1]:"");Id=value+"@"+b;}}public string Platform{get{string[]a=Id.Split('@');if(a.Length>1){return a[1];}else{return "local";}}set{string[]a=Id.Split('@');Id=a[0]+"@"+value;}}public override string ToString(){return Name+"@"+Platform;}public AgentId(string a){Id=a;}public bool MatchesName(AgentId a){return a.Name=="ANY"||a.Name=="ALL"||a.Name==Name||Name=="ANY"||Name=="ALL";}public bool MatchesPlatform(AgentId a){return a.Platform=="local"||a.Platform=="ALL"||a.Platform=="ANY"||a.Platform==""||a.Platform==Platform||Platform=="ALL"||Platform=="ANY";}public bool Matches(AgentId a){return MatchesName(a)&&MatchesPlatform(a);}public bool Equals(AgentId a){return Name==a.Name&&(Platform==a.Platform||Platform=="local"||a.Platform=="local"||Platform==""||a.Platform=="");}public override bool Equals(Object a){if(a==null)return false;AgentId b=a as AgentId;if(b==null)return false;else return Equals(b);}public static bool operator==(AgentId a,AgentId b){if(((object)a)==null||((object)b)==null)return Object.Equals(a,b);return a.Equals(b);}public static bool operator!=(AgentId a,AgentId b){if(((object)a)==null||((object)b)==null)return!Object.Equals(a,b);return!(a.Equals(b));}}public class Service:PlatformService{public Func<Agent,AgentProtocol>Create;public Service(string a,string b,AgentId c,Func<Agent,AgentProtocol>d):this(a,b,c,false,d){}public Service(string a,string b,AgentId c,bool d,Func<Agent,AgentProtocol>e):this(a,b,c,new AgentId("ANY@ANY"),d,e){}public Service(string a,string b,AgentId c,AgentId d,Func<Agent,AgentProtocol>e):this(a,b,c,d,false,e){}public Service(string a,string b,AgentId c,AgentId d,bool e,Func<Agent,AgentProtocol>f):base(a,b,c,d,e){Create=f;}}public class PlatformService{public string Id;public string Description;public AgentId Provider;private bool IsUIProvider;public bool ProvidesUI{get{return IsUIProvider;}}private AgentId PermissionMask;public PlatformService(string a,string b,AgentId c):this(a,b,c,new AgentId("ANY@ANY"),false){}public PlatformService(string a,string b,AgentId c,AgentId d):this(a,b,c,d,false){}public PlatformService(string a,string b,AgentId c,AgentId d,bool e){Id=a;Description=b;Provider=c;IsUIProvider=e;PermissionMask=d;}public bool HasPermissions(AgentId a){return a.Matches(PermissionMask);}public string ToXML(){return "<service"+(ProvidesUI?" providesUI":"")+" id='"+Id.ToString()+"' description='"+Description+"' provider='"+Provider+"' permissions='"+PermissionMask+"'/>";}public string ToString(){return ToXML();}public static PlatformService FromXMLString(string a){XML.XMLTree b=XML.ParseXML(a).GetNode(c=>c.Type=="service");return PlatformService.FromXMLNode(b);}public static PlatformService FromXMLNode(XML.XMLTree a){if(a.Type!="service"){return null;}if(a.GetAttribute("id")==null||a.GetAttribute("provider")==null){return null;}return new PlatformService(a.GetAttribute("id"),a.GetAttribute("description")??"",new AgentId(a.GetAttribute("provider")),new AgentId(a.GetAttribute("permissions")??"ANY@ANY"),a.GetAttribute("providesui")!=null&&a.GetAttribute("providesui")!="false");}public bool Equals(PlatformService a){return Id==a.Id&&Provider==a.Provider;}public override bool Equals(Object a){if(a==null)return false;PlatformService b=a as PlatformService;if(b==null)return false;else return Equals(b);}public static bool operator==(PlatformService a,PlatformService b){if(((object)a)==null||((object)b)==null)return Object.Equals(a,b);return a.Equals(b);}public static bool operator!=(PlatformService a,PlatformService b){if(((object)a)==null||((object)b)==null)return!Object.Equals(a,b);return!(a.Equals(b));}}public class PrintProtocol:AgentProtocol{public override string GetProtocolId(){return "print";}public PrintProtocol(Agent a):base(a){}public override void ReceiveMessage(AgentMessage a){Stop();}public override void Restart(){}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new PrintProtocol(a);});}}class n:AgentProtocol{public class Platform:AgentProtocol{public override string GetProtocolId(){return "register-services";}public Platform(Agent a):base(a){}public override void ReceiveMessage(AgentMessage a){List<XML.XMLTree>b=XML.ParseXML(a.Content).GetAllNodes(c=>(c.Type=="service"));PlatformAgent d=Holder as PlatformAgent;AgentMessage e;if(d==null){e=a.MakeResponse(Holder.Id,AgentMessage.StatusCodes.UNKNOWNERROR,"ERROR: Agent is no PlatformAgent - service registration not possible!");e.SenderChatId=ChatId;Holder.SendMessage(ref e);Stop();return;}AgentId f=a.Sender;f.Platform=d.Id.Platform;PlatformService g;foreach(XML.XMLTree serviceNode in b){g=PlatformService.FromXMLNode(serviceNode);if(g!=null){if(!d.PlatformServices.ContainsKey(g.Id)){d.PlatformServices[g.Id]=new List<PlatformService>();}d.PlatformServices[g.Id].Add(g);}}e=a.MakeResponse(Holder.Id,AgentMessage.StatusCodes.OK,"services registered");e.SenderChatId=ChatId;Holder.SendMessage(ref e);Stop();}public override void Restart(){}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new Platform(a);});}}public override string GetProtocolId(){return "complete-service-registration";}public n(Agent a):base(a){}public override void ReceiveMessage(AgentMessage a){if(a.Status==AgentMessage.StatusCodes.OK&&a.Content=="services registered"){Holder.Id.Platform=a.Sender.Name;Holder.Event("register");Stop();}else{base.ReceiveMessage(a);}}public override void Restart(){}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new n(a);});}}public class ServiceRegister:Dictionary<string,List<PlatformService>>{public ServiceRegister Merge(ServiceRegister a){ServiceRegister b=new ServiceRegister();foreach(KeyValuePair<string,List<PlatformService>>item in this){b.Add(item.Key,item.Value);}foreach(KeyValuePair<string,List<PlatformService>>item in a){if(b.ContainsKey(item.Key)){b[item.Key].AddList<PlatformService>(item.Value);b[item.Key]=Util.Uniques<PlatformService>(b[item.Key]);}else{b[item.Key]=item.Value;}}return b;}public string ToXML(){string a="<services>";foreach(KeyValuePair<string,List<PlatformService>>item in this){foreach(PlatformService service in item.Value){a+=service.ToXML();}}a+="</services>";return a;}}class o:AgentProtocol{public override string GetProtocolId(){return "get-services";}public o(Agent a):base(a){}public override void ReceiveMessage(AgentMessage a){if(a.Status==AgentMessage.StatusCodes.OK){List<PlatformService>b=new List<PlatformService>(Holder.Services.Values);PlatformAgent c=Holder as PlatformAgent;if(c!=null){foreach(List<PlatformService>platformServices in c.PlatformServices.Values){b.AddRange(platformServices);}}b=Util.Uniques<PlatformService>(b);string d="<platformInfo platformname='"+Parser.Sanitize(Holder.Prog.Me.CubeGrid.CustomName)+"'/>";d+="<services>";foreach(PlatformService service in b){if((a.TargetInterface==AgentMessage.Interfaces.TEXT||service.ProvidesUI)){d+=service.ToXML();}else{if(!service.HasPermissions(a.Sender)){}}}d+="</services>";AgentMessage e=a.MakeResponse(Holder.Id,AgentMessage.StatusCodes.OK,d);e.TargetInterface=AgentMessage.Interfaces.UI;e.SenderChatId=ChatId;Holder.ScheduleMessage(e);Stop();}else{base.ReceiveMessage(a);}}public override void Restart(){}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new o(a);},new Dictionary<string,string>{{"description","List Services"}});}}public class UITerminalAgent:RegisteredAgent{public XML.UIController UI;public IMyTextPanel Screen;public UITerminalAgent(MyGridProgram a,IMyTextPanel b):base(a){Screen=b;UI=XML.UIController.FromXML("<meta historyDisabled/><hl width='100%'/>Requesting Services...<hl width='100%'/>");new q(this).Setup();UIServiceIndexServer c=new UIServiceIndexServer(this);c.Setup();c.LoadHomeScreen();}public void LoadXML(string a){UI.LoadXML(a);}public void LoadUI(XML.XMLTree a){UI.LoadUI(a);if(UI.HasUserInputBindings){ScheduleRefresh();}}public void UpdateScreen(){UI.RenderTo(Screen);UI.ApplyScreenProperties(Screen);}public void Call(List<string>a){UI.Call(a);UpdateScreen();if(UI.HasUserInputBindings){ScheduleRefresh();}}public override void Refresh(TimeSpan a){base.Refresh(a);UI.Call(new List<string>{"refresh"});if(UI.UpdateUserInput()){UpdateScreen();}}}public class RegisteredAgent:Agent{public RegisteredAgent(MyGridProgram a):base(a){if(Id.Platform!="local"&&(GTS.GetBlockWithName(Id.Platform)as IMyProgrammableBlock)==null){Id.Platform="local";}new n(this).Setup();new p(this).Setup();}public void RegisterWith(string a){AgentId b=new AgentId(a+"@local");n c=new n(this);Chats[c.ChatId]=c;string d="<services>";foreach(KeyValuePair<string,Service>service in Services){if(service.Value.ProvidesUI||service.Value.HasPermissions(new AgentId("**@local"))){d+=service.Value.ToXML();}}d+="</services>";AgentMessage e=new AgentMessage(this.Id,b,AgentMessage.StatusCodes.OK,d,new n.Platform(this).GetProtocolId(),c.ChatId);SendMessage(ref e);}}class p:AgentProtocol{int State;public override string GetProtocolId(){return "print-platform-services";}public p(Agent a):base(a){State=0;}public override void ReceiveMessage(AgentMessage a){switch(State){case 0:if(Holder.Id.Platform=="local"){Stop();return;}else{AgentMessage b=new AgentMessage(Holder.Id,new AgentId(Holder.Id.Platform+"@local"),AgentMessage.StatusCodes.OK,"","get-services",ChatId);b.SenderChatId=ChatId;Holder.SendMessage(ref b);State=1;}break;case 1:if(a.Status==AgentMessage.StatusCodes.OK){List<XML.XMLTree>c=XML.ParseXML(a.Content).GetAllNodes(d=>d.Type=="service");foreach(XML.XMLTree service in c){}}else{base.ReceiveMessage(a);}Stop();break;}}public override void Restart(){State=0;ReceiveMessage(null);}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new p(a);});}}class q:AgentProtocol{String RouteDefinition;public override string GetProtocolId(){return "request-route";}private XML.UIController UI;public q(Agent a):base(a){}public override void Restart(){if(RouteDefinition!=null){RequestRoute(RouteDefinition);}}
public override void ReceiveMessage(AgentMessage a){if(a.Status!=AgentMessage.StatusCodes.OK){base.ReceiveMessage(a);return;}if(a.GetAttribute("uiupdates")!=null||a.GetAttribute("uiupdates")!="false"){ListenForUIUpdate(true);}UITerminalAgent b=Holder as UITerminalAgent;if(b!=null){try{XML.XMLTree c=XML.ParseXML(a.Content);b.LoadUI(c);b.UpdateScreen();}catch{}Stop();}else{base.ReceiveMessage(a);Stop();return;}}public bool RequestRoute(string a){using(Logger b=new Logger("RequestRouteProtocol.RequestRoute()",Logger.Mode.LOG)){string c=@"(?<provider>[\w{}\s_\-#]+@[\w{}\s_\-#]+)::(?<service>[\w\-]+)(\((?<argument>[^)]*)\)){0,1}";System.Text.RegularExpressions.Regex d=new System.Text.RegularExpressions.Regex(c);System.Text.RegularExpressions.Match e=d.Match(a);if(!e.Success){throw new Exception("WARNING: Route not understood: <<"+a+">>");Stop();return false;}ListenForUIUpdate(false);AgentId f=new AgentId(e.Groups["provider"].Value);string g=e.Groups["service"].Value;string h=Parser.UnescapeQuotes(e.Groups["argument"].Value);UITerminalAgent i=Holder as UITerminalAgent;h+=" "+(i.UI.GetPackedValues()??"");i.LoadXML("<meta refresh historyDisabled backgroundColor='000000' fontColor='CC0000'/><br/><br/><hl/>Loading...<hl/>");i.UpdateScreen();RouteDefinition=a;AgentMessage j=new AgentMessage(Holder.Id,f,AgentMessage.StatusCodes.OK,h,g,ChatId);j.TargetInterface=AgentMessage.Interfaces.UI;j.SenderChatId=ChatId;Holder.ScheduleMessage(j);b.log("requesting route: "+j.ToXML(),Logger.Mode.LOG);return true;}}public void ListenForUIUpdate(bool a){if(a){Holder.RegisterService("update-ui",b=>new q(b));}else{Holder.Services.Remove("update-ui");}}public override void Setup(){XML.Route.RouteHandlers.Add("man",(a,b)=>{using(Logger c=new Logger("Handle man route",Logger.Mode.LOG)){q d=new q(Holder);Holder.AddChat(d);d.UI=b;d.RequestRoute(a);}});}}public class UIServiceIndexServer:AgentProtocol{static string XMLHeader="<meta fontColor='000000' backgroundColor='999999' fontSize='1.5' $ATTRIBUTES$/><uicontrols>$TITLE$</uicontrols><hl/>";public override string GetProtocolId(){return "get-ui-services-index";}private int RefreshTime;private XML.XMLTree UIRoot;public Dictionary<string,List<PlatformService>>Services{get{if(Holder.GetKnowledgeEntry("UISERVICES",this)==null){Holder.SetKnowledgeEntry("UISERVICES",new Dictionary<string,List<PlatformService>>(),this);}return Holder.GetKnowledgeEntry("UISERVICES",this)as Dictionary<string,List<PlatformService>>;}}public Dictionary<string,string>Platforms{get{if(Holder.GetKnowledgeEntry("UIPLATFORMS",this)==null){Holder.SetKnowledgeEntry("UIPLATFORMS",new Dictionary<string,string>(),this);}return Holder.GetKnowledgeEntry("UIPLATFORMS",this)as Dictionary<string,string>;}}AgentId UIReceiver;bool HomePageActive{get{object a=Holder.GetKnowledgeEntry("HomePageActive",this);return a!=null&&(bool)a;}set{Holder.SetKnowledgeEntry("HomePageActive",value,this);}}public UIServiceIndexServer(Agent a):base(a){RefreshTime=1250;}public override void ReceiveMessage(AgentMessage a){if(a.Status==AgentMessage.StatusCodes.OK){ReceiveServices(a);}else{base.ReceiveMessage(a);}}private void ReceiveServices(AgentMessage a){XML.XMLTree b;try{b=XML.ParseXML(a.Content);}catch{return;}string c=a.Sender.Platform;string d=b.GetNode(e=>e.Type=="platforminfo").GetAttribute("platformname");List<PlatformService>f=new List<PlatformService>();Services[c]=new List<PlatformService>();Platforms[c]=Parser.UnescapeQuotes(d??c);PlatformService g;foreach(XML.XMLTree serviceNode in b.GetAllNodes(e=>e.Type=="service")){g=PlatformService.FromXMLNode(serviceNode);if(g!=null){Services[c].Add(g);}}if(Services[c].Count==0){Services.Remove(c);Platforms.Remove(c);}if(HomePageActive)LoadHomeScreen();}public override void Restart(){}public override void NotifyEvent(string a){switch(a){case "register":RetrieveServices();break;case "refresh":int b=(int)Holder.GetKnowledgeEntry("TimeTillRefresh",this);b-=Holder.ElapsedTime.Milliseconds;if(b<0){b=RefreshTime;RetrieveServices();}Holder.ScheduleRefresh();Holder.SetKnowledgeEntry("TimeTillRefresh",b,this);break;default:base.NotifyEvent(a);break;}}public void SetUIReceiver(AgentId a){UIReceiver=a;}private void RetrieveServices(){AgentMessage a=new AgentMessage(Holder.Id,new AgentId("ALL@ALL"),AgentMessage.StatusCodes.OK,"","get-services",ChatId);a.TargetInterface=AgentMessage.Interfaces.UI;a.SenderChatId=ChatId;Holder.SendMessage(ref a);}public string PageHome(){StringBuilder a=new StringBuilder(XMLHeader).Replace("$TITLE$","Platforms").Replace("$ATTRIBUTES$","uiServiceIndexHome");a.Append("<menu id='platformMenu'>");a.Append(GetPlatformMenuitems());a.Append("</menu>");return a.ToString();}private StringBuilder GetPlatformMenuitems(){StringBuilder a=new StringBuilder();foreach(string key in Platforms.Keys){a.Append("<menuItem id='"+key+"' route='fn:show-platform-services' platform='"+key+"'>"+Platforms[key]+"</menuitem>");}return a;}public string PagePlatformServices(string a){StringBuilder b=new StringBuilder(XMLHeader).Replace("$TITLE$",Platforms[a]+" Services");b.Append("<menu>");foreach(PlatformService service in Services[a]){b.Append("<menuitem route='"+MakeRoute(service.Provider,service.Id,"")+"'>"+service.Description+"</menuitem>");}b.Append("</menu>");return b.ToString();}public void LoadHomeScreen(){UITerminalAgent a=Holder as UITerminalAgent;if(a!=null){XML.XMLTree b=a.UI.GetNode(c=>c.Type=="meta");bool d=(b.GetAttribute("uiserviceindexhome")!=null);if(HomePageActive&&!d){HomePageActive=false;}else{XML.XMLTree e=XML.ParseXML(PageHome());if(d){b.SetAttribute("historydisabled","true");}a.LoadUI(e);HomePageActive=true;a.UpdateScreen();Holder.ScheduleRefresh();}}}public override void Setup(){XML.Route.RegisterRouteFunction("show-platform-services",a=>{string b=a.GetSelectedNode().GetAttribute("platform");if(b!=null){a.LoadUI(XML.ParseXML(PagePlatformServices(b)));}});Holder.SetKnowledgeEntry("TimeTillRefresh",RefreshTime,this);AgentProtocol c=new UIServiceIndexServer(Holder);Holder.AddChat(c);Holder.OnEvent("register",c);Holder.OnEvent("refresh",c);Holder.SetKnowledgeEntry("HomePageActive",false,this);}}public class UIServerProtocol:AgentProtocol{public override string GetProtocolId(){return "serve-ui-page";}public string ApplicationId;public Dictionary<string,string>ResponseData;public IMyGridTerminalSystem GTS{get{return Holder.GTS;}}public Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>Pages{get{return GetPageGenerators().Where(a=>a.Key.StartsWith(ApplicationId+"_")).ToDictionary(a=>a.Key,a=>a.Value);}set{foreach(KeyValuePair<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>page in value){SetPageGenerator(page.Key,page.Value,false);}}}public UIServerProtocol(Agent a):base(a){if(!GetPageGenerators().ContainsKey("404")){GetPageGenerators()["404"]=(b,c,d)=>"Page not found!<hl/><uicontrols>BACK</uicontrols>";}ApplicationId="";}public void SetPageGenerator(string a,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>b){SetPageGenerator(a,b,false);}private void SetPageGenerator(string a,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>b,bool c){string d=c?a:ApplicationId+"_"+a;GetPageGenerators()[d]=b;}public Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>GetPageGenerator(string a){return GetPageGenerator(a,false);}public string GetPage(string a,AgentMessage b,Dictionary<string,string>c){return GetPageGenerator(a)(this,b,c);}private Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>GetPageGenerator(string a,bool b){string c=b?a:ApplicationId+"_"+a;return GetPageGenerators().GetValueOrDefault(c,GetPageGenerators()["404"]??((d,e,f)=>"404"));}private Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>GetPageGenerators(){if(Holder.GetKnowledgeEntry("UIPAGES",this)==null){Holder.SetKnowledgeEntry("UIPAGES",new Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>(),this);}return Holder.GetKnowledgeEntry("UIPAGES",this)as Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>;}public override void ReceiveMessage(AgentMessage a){if(a.Status==AgentMessage.StatusCodes.OK){Dictionary<string,string>b=Parser.GetXMLAttributes(a.Content);ResponseData=new Dictionary<string,string>();string c=GetPage(b.GetValueOrDefault<string,string>("page")??"",a,b);AgentMessage d=a.MakeResponse(Holder.Id,AgentMessage.StatusCodes.OK,c);d.SenderChatId=ChatId;foreach(KeyValuePair<string,string>entry in ResponseData){if(d.GetAttribute(entry.Key)==null){d.SetAttribute(entry.Key,entry.Value);}}Holder.SendMessage(ref d);Stop();}else{base.ReceiveMessage(a);}}public static bool CreateApplication(Agent a,string b,string c,Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>d){UIServerProtocol e=new UIServerProtocol(a);e.SelectApplication(b);e.Pages=d;if(a.Services.ContainsKey(b)){return false;}a.RegisterService(b,f=>{UIServerProtocol g=new UIServerProtocol(f);g.SelectApplication(b);return g;},new Dictionary<string,string>{{"description",c},{"providesui","true"}});return true;}static public Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>SimplePage(string a,string b){return(c,d,e)=>b;}public override void Restart(){}public void SelectApplication(string a){ApplicationId=a;}public string MakeApplicationRoute(string a,string b){return MakeRoute(Holder.Id,ApplicationId,"page='"+a+"' "+b);}}}public static class Util{public static List<T>Uniques<T>(List<T>a){List<T>b=new List<T>();bool c;foreach(T itemIn in a){c=false;foreach(T itemOut in b){if(itemOut.Equals(itemIn)){c=true;}}if(!c){b.Add(itemIn);}}return b;}}
}

}