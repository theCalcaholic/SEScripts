public static class XML{public static Dictionary<string,Func<XML.XMLTree>>NodeRegister=new Dictionary<string,Func<XML.XMLTree>>{{"root",()=>{return new XML.RootNode();}},{"menu",()=>{return new XML.Menu();}},{"menuitem",()=>{return new XML.MenuItem();}},{"progressbar",()=>{return new XML.ProgressBar();}},{"container",()=>{return new XML.Container();}},{"hl",()=>{return new XML.HorizontalLine();}},{"uicontrols",()=>{return new UIControls();}},{"textinput",()=>{return new TextInput();}},{"submitbutton",()=>{return new SubmitButton();}},{"br",()=>{return new Break();}},{"space",()=>{return new Space();}},{"hidden",()=>{return new Hidden();}},{"hiddendata",()=>{return new Hidden();}},{"meta",()=>{return new s();}}};public static XMLTree CreateNode(string a){Logger.debug("XML.CreateNode()");Logger.IncLvl();a=a.ToLower();if(NodeRegister.ContainsKey(a)){Logger.DecLvl();return NodeRegister[a]();}else{Logger.DecLvl();return new Generic(a);}}public static XMLTree ParseXML(string a){char[]b={' ','\n'};Logger.debug("ParseXML");Logger.IncLvl();RootNode d=new RootNode();XMLTree e=d;string f;while(a.Length>0){if(a[0]=='<'){if(a[1]=='/'){int g=a.IndexOfAny(b);int h=a.IndexOf('>');int i=(g==-1?h:Math.Min(g,h))-2;f=a.Substring(2,i).ToLower();if(f!=e.Type){throw new Exception("Invalid end tag ('"+f+"(!= "+e.Type+"') found (node has been ended but not started)!");}e=e.GetParent()as XMLTree;a=a.Substring(h+1);}else{int g=a.IndexOfAny(b);int h=Parser.GetNextOutsideQuotes('>',a);int i=(g==-1?h:Math.Min(g,h))-1;f=a.Substring(1,i).ToLower().TrimEnd(new char[]{'/'});XMLTree j=XML.CreateNode(f);if(j==null){int k=a.IndexOf("<");int l=k==-1?a.Length:k;j=new XML.TextNode(a.Substring(0,l).Trim());}e.AddChild(j);if(g!=-1&&g<h){string m=a.Substring(i+2,h-i-2);m=m.TrimEnd(new char[]{'/'});Dictionary<string,string>n=Parser.GetXMLAttributes(m);foreach(string key in n.Keys){j.SetAttribute(key,n[key]);}}if(j.Type=="textnode"||h==-1||a[h-1]!='/'){e=j;}a=a.Substring(h+1);}}else{int h=a.IndexOf("<");int l=h==-1?a.Length:h;XMLTree j=new XML.TextNode(a.Substring(0,l).Trim());if(j.Render(0)!=null){e.AddChild(j);}a=h==-1?"":a.Substring(h);}}Logger.DecLvl();return d;}public class RootNode:XMLTree{public RootNode():base(){Type="root";PreventDefault("UP");PreventDefault("DOWN");}public override string GetAttribute(string a){XMLTree b=GetNode(d=>{return d.Type=="meta";});string e;if(b!=null){e=b.GetAttribute(a);}else{e=base.GetAttribute(a);}switch(a){case "width":if(e==null){e="100%";}break;}return e;}public override void SetAttribute(string a,string b){XMLTree d=GetNode(e=>{return e.Type=="meta";});if(d!=null){d.SetAttribute(a,b);}else{base.SetAttribute(a,b);}}public override void UpdateSelectability(XMLTree a){base.UpdateSelectability(a);if(IsSelectable()&&!IsSelected()){SelectFirst();}}public override bool SelectNext(){if(IsSelectable()&&!base.SelectNext()){return SelectNext();}return true;}public override bool SelectPrevious(){if(!base.SelectPrevious()){return SelectPrevious();}return true;}public override void OnKeyPressed(string a){switch(a){case "UP":SelectPrevious();break;case "DOWN":SelectNext();break;}}}public abstract class XMLTree:XMLParentNode{public string Type;private XMLParentNode Parent;private List<string>PreventDefaults;protected List<XMLTree>Children;protected bool Selectable;protected bool ChildrenAreSelectable;private bool Selected;protected int SelectedChild;protected bool Activated;protected Dictionary<string,string>Attributes;public XMLTree(){PreventDefaults=new List<string>();Parent=null;Children=new List<XMLTree>();Selectable=false;ChildrenAreSelectable=false;Selected=false;SelectedChild=-1;Activated=false;Attributes=new Dictionary<string,string>();Type="NULL";SetAttribute("alignself","left");SetAttribute("aligntext","left");SetAttribute("selected","false");SetAttribute("selectable","false");SetAttribute("flow","vertical");}public bool IsSelectable(){Logger.debug(Type+": IsSelectable():");Logger.IncLvl();Logger.DecLvl();return Selectable||ChildrenAreSelectable;}public bool IsSelected(){Logger.debug(Type+": IsSelected():");Logger.IncLvl();Logger.DecLvl();return Selected;}public XMLTree GetSelectedSibling(){Logger.debug(Type+": GetSelectedSibling():");Logger.IncLvl();if(!Selected){Logger.DecLvl();return null;}if(SelectedChild==-1){Logger.DecLvl();return this;}else{Logger.DecLvl();return Children[SelectedChild].GetSelectedSibling();}}public virtual void AddChild(XMLTree a){Logger.debug(Type+": AddChild():");Logger.IncLvl();AddChildAt(Children.Count,a);Logger.DecLvl();}public virtual void AddChildAt(int a,XMLTree b){Logger.debug(Type+":AddChildAt()");Logger.IncLvl();if(a>Children.Count){throw new Exception("XMLTree.AddChildAt - Exception: position must be less than number of children!");}Children.Insert(a,b);b.SetParent(this as XMLParentNode);UpdateSelectability(b);Logger.DecLvl();}public int NumberOfChildren(){return Children.Count;}public void SetParent(XMLParentNode a){Logger.debug(Type+": SetParent():");Logger.IncLvl();Parent=a;Logger.DecLvl();}public XMLParentNode GetParent(){Logger.debug(Type+": GetParent():");Logger.IncLvl();Logger.DecLvl();return Parent;}public XMLTree GetChild(int a){Logger.debug(Type+": GetChild():");Logger.IncLvl();Logger.DecLvl();return a<Children.Count?Children[a]:null;}public XMLTree GetNode(Func<XMLTree,bool>a){if(a(this)){return this;}else{XMLTree b=GetChild(0);XMLTree d;for(int e=1;b!=null;e++){d=b.GetNode(a);if(d!=null){return d;}b=GetChild(e);}}return null;}public List<XMLTree>GetAllNodes(Func<XMLTree,bool>a){List<XMLTree>b=new List<XMLTree>();GetAllNodes(a,ref b);return b;}private void GetAllNodes(Func<XMLTree,bool>a,ref List<XMLTree>b){if(a(this)){b.Add(this);}XMLTree d=GetChild(0);for(int e=1;d!=null;e++){d.GetAllNodes(a,ref b);d=GetChild(e);}}public virtual void UpdateSelectability(XMLTree a){Logger.debug(Type+": UpdateSelectability():");Logger.IncLvl();bool b=ChildrenAreSelectable;ChildrenAreSelectable=ChildrenAreSelectable||a.IsSelectable();if(Parent!=null&&(Selectable||ChildrenAreSelectable)!=(Selectable||b)){Parent.UpdateSelectability(this);}Logger.DecLvl();}public bool SelectFirst(){Logger.debug(Type+": SelectFirst():");Logger.IncLvl();if(SelectedChild!=-1){Children[SelectedChild].Unselect();}SelectedChild=-1;bool a=(Selectable||ChildrenAreSelectable)?SelectNext():false;Logger.DecLvl();return a;}public bool SelectLast(){Logger.debug(Type+": SelectLast():");Logger.IncLvl();if(SelectedChild!=-1){Children[SelectedChild].Unselect();}SelectedChild=-1;Logger.DecLvl();return(Selectable||ChildrenAreSelectable)?SelectPrevious():false;}public void Unselect(){Logger.debug(Type+": Unselect():");Logger.IncLvl();if(SelectedChild!=-1){Children[SelectedChild].Unselect();}Selected=false;Activated=false;Logger.DecLvl();}public virtual bool SelectNext(){Logger.debug(Type+": SelectNext():");Logger.IncLvl();bool a=IsSelected();if(SelectedChild==-1||!Children[SelectedChild].SelectNext()){Logger.debug(Type+": find next child to select...");SelectedChild++;while((SelectedChild<Children.Count&&(!Children[SelectedChild].SelectFirst()))){SelectedChild++;}if(SelectedChild==Children.Count){SelectedChild=-1;Selected=Selectable&&!Selected;}else{Selected=true;}}if(!Selected){Unselect();}if(!a&&IsSelected()){OnSelect();}Logger.DecLvl();return Selected;}public virtual bool SelectPrevious(){Logger.debug(Type+": SelectPrevious():");Logger.IncLvl();bool a=IsSelected();if(SelectedChild==-1){SelectedChild=Children.Count;}if(SelectedChild==Children.Count||!Children[SelectedChild].SelectPrevious()){SelectedChild--;while(SelectedChild>-1&&!Children[SelectedChild].SelectLast()){SelectedChild--;}if(SelectedChild==-1){Selected=Selectable&&!Selected;}else{Selected=true;}}if(!Selected){Unselect();}if(!a&&IsSelected()){OnSelect();}Logger.DecLvl();return Selected;}public virtual void OnSelect(){}public virtual string GetAttribute(string a){Logger.debug(Type+": GetAttribute("+a+"):");Logger.IncLvl();if(Attributes.ContainsKey(a)){Logger.DecLvl();return Attributes[a];}else if(a=="flowdirection"&&Attributes.ContainsKey("flow")){return Attributes["flow"];}Logger.DecLvl();return null;}public virtual void SetAttribute(string a,string b){Logger.debug(Type+": SetAttribute():");Logger.IncLvl();if(a=="selectable"){bool d=b=="true";if(Selectable!=d){Selectable=d;if(Parent!=null){Parent.UpdateSelectability(this);}}}if(a=="activated"){bool e=b=="true";Activated=e;}if(a=="flowdirection"){Attributes["flow"]=b;}Attributes[a]=b;Logger.DecLvl();}public void KeyPress(string a){Logger.debug(Type+": _KeyPress():");Logger.IncLvl();Logger.debug("button: "+a);OnKeyPressed(a);if(Parent!=null&&!PreventDefaults.Contains(a)){Parent.KeyPress(a);}Logger.DecLvl();}public virtual void OnKeyPressed(string a){Logger.debug(Type+": OnKeyPressed()");Logger.IncLvl();switch(a){case "ACTIVATE":ToggleActivation();break;default:break;}Logger.DecLvl();}public virtual void ToggleActivation(){Logger.debug(Type+": ToggleActivation()");Logger.IncLvl();Activated=!Activated;Logger.DecLvl();}public void PreventDefault(string a){Logger.debug(Type+": PreventDefault()");Logger.IncLvl();if(!PreventDefaults.Contains(a)){PreventDefaults.Add(a);}Logger.DecLvl();}public void AllowDefault(string a){Logger.debug(Type+": AllowDefault()");Logger.IncLvl();if(PreventDefaults.Contains(a)){PreventDefaults.Remove(a);}Logger.DecLvl();}public void FollowRoute(Route a){Logger.debug(Type+": FollowRoute");Logger.IncLvl();if(Parent!=null){Parent.FollowRoute(a);}Logger.DecLvl();}public virtual Dictionary<string,string>GetValues(Func<XMLTree,bool>a){Logger.log(Type+": GetValues()");Logger.IncLvl();Dictionary<string,string>b=new Dictionary<string,string>();string d=GetAttribute("name");string e=GetAttribute("value");if(d!=null&&e!=null){Logger.log("Added entry {{{name}: {value}}}");b[d]=e;}Dictionary<string,string>f;foreach(XMLTree child in Children){f=child.GetValues(a);foreach(string key in f.Keys){if(!b.ContainsKey(key)){b[key]=f[key];}}}Logger.DecLvl();return b;}public int GetWidth(int a){Logger.debug(Type+
".GetWidth()");Logger.IncLvl();string b=GetAttribute("width");if(b==null){Logger.DecLvl();return 0;}else{if(b[b.Length-1]=='%'){Logger.debug("is procent value ("+Single.Parse(b.Substring(0,b.Length-1)).ToString()+")");Logger.DecLvl();return(int)(Single.Parse(b.Substring(0,b.Length-1))/100f*a);}else if(a==0){Logger.DecLvl();return Int32.Parse(b);}else{Logger.DecLvl();return Math.Min(a,Int32.Parse(b));}}}public string Render(int a){Logger.debug(Type+".Render()");Logger.IncLvl();List<string>b=new List<string>();int d=GetWidth(a);PreRender(ref b,d,a);RenderText(ref b,d,a);string e=PostRender(b,d,a);Logger.DecLvl();return e;}protected virtual void PreRender(ref List<string>a,int b,int d){Logger.debug(Type+".PreRender()");Logger.IncLvl();Logger.DecLvl();}protected virtual void RenderText(ref List<string>a,int b,int d){Logger.debug(Type+".RenderText()");Logger.IncLvl();for(int e=0;e<Children.Count;e++){if(GetAttribute("flow")=="vertical"){string f=RenderChild(Children[e],b);if(f!=null){if(e>0&&Children[e-1].Type=="textnode"&&(Children[e].Type=="textnode"||Children[e].Type=="br")){a[a.Count-1]+=f;}else{a.Add(f);}}else{}}else{string f=RenderChild(Children[e],b);if(f!=null){d-=TextUtils.GetTextWidth(f);a.Add(f);}}}Logger.DecLvl();}protected virtual string PostRender(List<string>a,int b,int d){Logger.debug(Type+".PostRender()");Logger.IncLvl();string e="";string f=GetAttribute("flow");string g=GetAttribute("alignchildren");string h=GetAttribute("alignself");int i=0;foreach(string segment in a){int j=TextUtils.GetTextWidth(segment);if(j>i){i=j;}}i=Math.Min(d,Math.Max(b,i));if(f=="vertical"){for(int k=0;k<a.Count;k++){switch(g){case "right":a[k]=TextUtils.PadText(a[k],i,TextUtils.PadMode.LEFT);break;case "center":a[k]=TextUtils.CenterText(a[k],i);break;default:a[k]=TextUtils.PadText(a[k],i,TextUtils.PadMode.RIGHT);break;}}e=String.Join("\n",a.ToArray());}else{e=String.Join("",a.ToArray());}if(d-i>0){if(h=="center"){Logger.log("Center element...");e=TextUtils.CenterText(e,d);}else if(h=="right"){Logger.log("Aligning element right...");e=TextUtils.PadText(e,d,TextUtils.PadMode.RIGHT);}}Logger.DecLvl();return e;}protected virtual string RenderChild(XMLTree a,int b){Logger.log(Type+".RenderChild()");Logger.IncLvl();Logger.DecLvl();return a.Render(b);}public void DetachChild(XMLTree a){Children.Remove(a);}public void Detach(){if(GetParent()!=null){GetParent().DetachChild(this);}}}public interface XMLParentNode{XMLParentNode GetParent();void UpdateSelectability(XMLTree a);void KeyPress(string a);void FollowRoute(Route a);bool SelectNext();void DetachChild(XMLTree a);}public class TextNode:XMLTree{public string Content;public TextNode(string a):base(){Type="textnode";Content=a.Replace("\n","");Content=Content.Trim(new char[]{'\n',' ','\r'});if(Content==""){Content=null;}}protected override void RenderText(ref List<string>a,int b,int d){}protected override string PostRender(List<string>a,int b,int d){return Content;}}public class Route{static public Dictionary<string,Action<string,UIController>>RouteHandlers=new Dictionary<string,Action<string,UIController>>{{"revert",(e,f)=>{f.RevertUI();}},{"xml",(e,f)=>{XMLTree g=ParseXML(Parser.UnescapeQuotes(e));f.LoadUI(g);}},{"fn",(e,f)=>{if(UIFactories.ContainsKey(e)){UIFactories[e](f);}}}};static Dictionary<string,Action<UIController>>UIFactories=new Dictionary<string,Action<UIController>>();string Definition;public Route(string a){Logger.debug("Route constructor():");Logger.IncLvl();Definition=a;Logger.DecLvl();}public void Follow(UIController a){Logger.debug("Route.Follow()");Logger.IncLvl();string[]b=Definition.Split(new char[]{':'},2);if(Route.RouteHandlers.ContainsKey(b[0].ToLower())){Route.RouteHandlers[b[0].ToLower()](b.Length>=2?b[1]:null,a);}Logger.DecLvl();}static public void RegisterRouteFunction(string a,Action<UIController>b){UIFactories[a]=b;}}public class UIController:XMLParentNode{XMLTree ui;public Stack<XMLTree>UIStack;public string Type;public UIController(XMLTree a){Logger.debug("UIController constructor()");Logger.IncLvl();Type="CTRL";UIStack=new Stack<XMLTree>();ui=a;ui.SetParent(this);if(GetSelectedNode()==null&&ui.IsSelectable()){ui.SelectFirst();}Logger.DecLvl();}public static UIController FromXML(string a){Logger.debug("UIController FromXMLString()");Logger.IncLvl();XMLTree b=XML.ParseXML(a);Logger.DecLvl();return new UIController(b);}public void ApplyScreenProperties(IMyTextPanel a){Logger.debug("UIController.ApplyScreenProperties()");Logger.IncLvl();if(ui.GetAttribute("fontcolor")!=null){string b=ui.GetAttribute("fontcolor");b="FF"+b.Substring(b.Length-2,2)+b.Substring(b.Length-4,2)+b.Substring(b.Length-6,2);Color d=new Color(uint.Parse(b,System.Globalization.NumberStyles.AllowHexSpecifier));a.SetValue<Color>("FontColor",d);}if(ui.GetAttribute("fontsize")!=null){a.SetValue<Single>("FontSize",Single.Parse(ui.GetAttribute("fontsize")));}if(ui.GetAttribute("backgroundcolor")!=null){string b=ui.GetAttribute("backgroundcolor");b="FF"+b.Substring(b.Length-2,2)+b.Substring(b.Length-4,2)+b.Substring(b.Length-6,2);Color d=new Color(uint.Parse(b,System.Globalization.NumberStyles.AllowHexSpecifier));a.SetValue<Color>("BackgroundColor",d);}Logger.DecLvl();}public void Call(List<string>a){Logger.debug("UIController.Main()");Logger.IncLvl();switch(a[0]){case "key":XMLTree b=GetSelectedNode();if(b!=null){b.KeyPress(a[1].ToUpper());}break;case "refresh":string d=ui.GetAttribute("refresh");if(d!=null){FollowRoute(new Route(d));}break;case "revert":RevertUI();break;default:break;}Logger.DecLvl();return;}public void LoadXML(string a){LoadUI(XML.ParseXML(a));}public void LoadUI(XMLTree a){Logger.debug("UIController: LoadUI():");Logger.IncLvl();if(ui.GetAttribute("historydisabled")==null||ui.GetAttribute("historydisabled")!="true"){UIStack.Push(ui);}if(a.GetAttribute("revert")!=null&&a.GetAttribute("revert")=="true"){RevertUI();}else{ui=a;ui.SetParent(this);}Logger.DecLvl();}public void ClearUIStack(){UIStack=new Stack<XMLTree>();}public void RevertUI(){Logger.log("UIController: RevertUI():");Logger.IncLvl();if(UIStack.Count==0){Logger.log("Error: Can't revert: UI stack is empty.");Logger.DecLvl();return;}ui=UIStack.Pop();ui.SetParent(this);Logger.DecLvl();}public string Render(){Logger.debug("UIController: Render():");Logger.IncLvl();Logger.DecLvl();return ui.Render(0);}public void RenderTo(IMyTextPanel a){Logger.debug("UIController.RenderTo()");Logger.IncLvl();int b=0;string d=a.BlockDefinition.SubtypeId;Logger.debug("Type: "+d);if(d=="LargeTextPanel"||d=="SmallTextPanel"){b=658;}else if(d=="LargeLCDPanel"||d=="SmallLCDPanel"){b=658;}else if(d=="SmallLCDPanelWide"||d=="LargeLCDPanelWide"){b=1316;}else if(d=="LargeBlockCorner_LCD_1"||d=="LargeBlockCorner_LCD_2"||d=="SmallBlockCorner_LCD_1"||d=="SmallBlockCorner_LCD_2"){}else if(d=="LargeBlockCorner_LCD_Flat_1"||d=="LargeBlockCorner_LCD_Flat_2"||d=="SmallBlockCorner_LCD_Flat_1"||d=="SmallBlockCorner_LCD_Flat_2"){}int e=(int)(((float)b)/a.GetValue<Single>("FontSize"));Logger.debug("font size: "+a.GetValue<Single>("FontSize").ToString());Logger.debug("resulting width: "+e.ToString());string f=ui.Render(e);Logger.debug("rendering <"+f);a.WritePublicText(f);Logger.DecLvl();}public void KeyPress(string a){Logger.debug("UIController: KeyPress():");Logger.IncLvl();switch(a){case "LEFT/ABORT":RevertUI();break;}Logger.DecLvl();}public XMLTree GetSelectedNode(){Logger.debug("UIController: GetSelectedNode():");Logger.IncLvl();XMLTree a=ui.GetSelectedSibling();Logger.DecLvl();return a;}public XMLTree GetNode(Func<XMLTree,bool>a){Logger.debug("UIController: GetNode()");Logger.IncLvl();Logger.DecLvl();return ui.GetNode(a);}public List<XMLTree>GetAllNodes(Func<XMLTree,bool>a){Logger.debug("UIController: GetAllNodes()");Logger.IncLvl();Logger.DecLvl();return ui.GetAllNodes(a);}public void UpdateSelectability(XMLTree a){}public void FollowRoute(Route a){Logger.debug("UIController: FollowRoute():");Logger.IncLvl();a.Follow(this);Logger.DecLvl();}public XMLParentNode GetParent(){return null;}public Dictionary<string,string>GetValues(){Logger.debug("UIController.GetValues()");Logger.IncLvl();return GetValues(a=>true);}public Dictionary<string,string>GetValues(Func<XMLTree,bool>a){Logger.debug("UIController.GetValues()");Logger.IncLvl();if(ui==null){Logger.DecLvl();return null;}Logger.DecLvl();return ui.GetValues(a);}public string GetPackedValues(Func<XMLTree,bool>a){return Parser.PackData(GetValues(a)).ToString();}public void DetachChild(XMLTree a){if(a==ui){ui=null;}}public string GetPackedValues(){Logger.debug("UIController.GetPackedValues()");Logger.IncLvl();Logger.DecLvl();return GetPackedValues(a=>true);}public bool SelectNext(){return ui.SelectNext();}}public abstract class UIFactory{private int Count;private int Max;private List<UIController>UIs;public UIFactory():this(null){}public UIFactory(List<UIController>a){Logger.debug("UIFactory constructor");Logger.IncLvl();if(a==null){UIs=new List<UIController>();}UIs=a;Logger.DecLvl();}public abstract XMLTree Render(UIController a);protected void UpdateUIs(XMLTree a){foreach(UIController ui in UIs){ui.LoadUI(a);}}}public class Generic:XMLTree{public Generic(string a):base(){Type=a.ToLower();}}public class Menu:XMLTree{public Menu():base(){Type="menu";}public override void AddChild(XMLTree a){Logger.debug(Type+": Add child():");Logger.IncLvl();if(a.Type!="menuitem"&&a.IsSelectable()){Logger.DecLvl();throw new Exception("ERROR: Only children of type <menupoint> or children that are not selectable are allowed!"+" (type was: <"+a.Type+">)");}base.AddChild(a);Logger.DecLvl();}protected override string RenderChild(XMLTree a,int b){P.Me.CustomData=Logger.History;string d="";string e="     ";if(a.Type=="menuitem"){d+=(a.IsSelected()?">> ":e);}d+=base.RenderChild(a,b);return d;}}public class MenuItem:XMLTree{Route TargetRoute;public MenuItem():this(null){}public MenuItem(Route a):base(){Type="menuitem";Selectable=true;SetRoute(a);PreventDefault("RIGHT/SUBMIT");}public override void SetAttribute(string a,
string b){Logger.debug(Type+": SetAttribute():");Logger.IncLvl();switch(a){case "route":Logger.debug("prepare to set route...");SetRoute(new Route(b));if(TargetRoute==null){Logger.debug("Failure!");}else{Logger.debug("Success!");}break;default:base.SetAttribute(a,b);break;}Logger.DecLvl();}public override void OnKeyPressed(string a){Logger.debug(Type+": OnKeyPressed():");switch(a){case "RIGHT/SUBMIT":if(TargetRoute!=null){Logger.debug("Follow Target Route!");FollowRoute(TargetRoute);}else{Logger.debug("No route set!");}break;}base.OnKeyPressed(a);Logger.DecLvl();}public void SetRoute(Route a){TargetRoute=a;}}public class ProgressBar:XMLTree{float StepSize{get{float a;if(!Single.TryParse(GetAttribute("stepsize"),out a)){return 0.1f;}return a;}set{string b=Math.Max(0.001f,Math.Min(0.009f,value)).ToString();if(b.Length>5){b+=b.Substring(0,5);}SetAttribute("stepsize",b);}}public float FillLevel{get{float a;if(!Single.TryParse(GetAttribute("value"),out a)){return 0.0f;}return a;}set{string b=Math.Max(0f,Math.Min(1f,value)).ToString();if(b.Length>5){b=b.Substring(0,5);}SetAttribute("value",b);}}public ProgressBar():this(0f){}public ProgressBar(float a):this(a,false){}public ProgressBar(float a,bool b):base(){Type="progressbar";PreventDefault("LEFT/ABORT");PreventDefault("RIGHT/SUBMIT");SetAttribute("width","500");SetAttribute("filledstring","|");SetAttribute("emptystring","'");SetAttribute("value",a.ToString());SetAttribute("stepsize","0.05");SetAttribute("selectable",b?"true":"false");}public void IncreaseFillLevel(){Logger.debug(Type+".IncreaseFillLevel()");Logger.IncLvl();FillLevel+=StepSize;Logger.DecLvl();}public void DecreaseFillLevel(){Logger.debug(Type+".DecreaseFillLevel()");Logger.IncLvl();FillLevel-=StepSize;Logger.DecLvl();}public override void OnKeyPressed(string a){Logger.debug(Type+": OnKeyPressed():");Logger.IncLvl();switch(a){case "LEFT/ABORT":DecreaseFillLevel();break;case "RIGHT/SUBMIT":IncreaseFillLevel();break;}base.OnKeyPressed(a);Logger.DecLvl();}protected override void RenderText(ref List<string>a,int b,int d){Logger.debug(Type+".RenderText()");Logger.IncLvl();string e=IsSelected()?">":"  ";string f=IsSelected()?"<":"  ";string g=f+"[";float h=FillLevel;string i=GetAttribute("filledstring");string j=GetAttribute("emptystring");int k=(b-2*TextUtils.GetTextWidth("[]"));g+=TextUtils.CreateStringOfLength(i,(int)(k*h));g+=TextUtils.CreateStringOfLength(j,(int)(k*(1-h)));g+="]"+e;a.Add(g);Logger.DecLvl();}}public class Container:XMLTree{public Container():base(){Type="container";}}public class HorizontalLine:XMLTree{public HorizontalLine():base(){Type="hl";SetAttribute("width","100%");}protected override void RenderText(ref List<string>a,int b,int d){a.Add(TextUtils.CreateStringOfLength("_",b,TextUtils.RoundMode.CEIL));}}public class UIControls:XMLTree{UIController Controller;public UIControls():base(){Type="uicontrols";Controller=null;SetAttribute("selectable","false");}private void RetrieveController(){XMLParentNode a=this;while(a.GetParent()!=null){a=a.GetParent();}Controller=a as UIController;SetAttribute("selectable",(Controller!=null&&Controller.UIStack.Count>0)?"true":"false");if(IsSelectable()){PreventDefault("LEFT/ABORT");PreventDefault("RIGHT/SUBMIT");}else{AllowDefault("LEFT/ABORT");AllowDefault("RIGHT/SUBMIT");}GetParent().UpdateSelectability(this);if(IsSelected()&&!IsSelectable()){GetParent().SelectNext();}}public override void OnKeyPressed(string a){if(Controller==null){RetrieveController();}switch(a){case "LEFT/ABORT":case "RIGHT/SUBMIT":if(Controller!=null&&Controller.UIStack.Count>0){Controller.RevertUI();}break;}}protected override string PostRender(List<string>a,int b,int d){if(Controller==null){RetrieveController();}string e;if(!IsSelectable()){e="";}else{e=IsSelected()?"<<":TextUtils.CreateStringOfLength(" ",TextUtils.GetTextWidth("<<"));}string f=base.PostRender(a,b,d);int g=TextUtils.CreateStringOfLength(" ",TextUtils.GetTextWidth(e)).Length;string h="";for(int i=0;i<g;i++){if((f.Length-1)<i||f[i]!=' '){h+=" ";}}f=e+(h+f).Substring(g);return f;}}public class TextInput:XMLTree{int CursorPosition;public TextInput(){Logger.log("TextInput constructor()");Logger.IncLvl();Type="textinput";Selectable=true;CursorPosition=-1;PreventDefault("LEFT/ABORT");PreventDefault("RIGHT/SUBMIT");SetAttribute("maxlength","10");SetAttribute("value","");SetAttribute("allowedchars"," a-z0-9");Logger.DecLvl();}public override void OnKeyPressed(string a){switch(a){case "LEFT/ABORT":DecreaseCursorPosition();break;case "RIGHT/SUBMIT":IncreaseCursorPosition();break;case "UP":DecreaseLetter();break;case "DOWN":IncreaseLetter();break;default:base.OnKeyPressed(a);break;}}private void IncreaseLetter(){Logger.log("TextInput.IncreaseLetter()");Logger.IncLvl();if(CursorPosition==-1){return;}char[]a=GetAttribute("value").ToCharArray();char b=a[CursorPosition];char[]d=GetAttribute("allowedchars").ToCharArray();for(int e=0;e<d.Length;e++){if(d[e]!='-'&&d[e]==a[CursorPosition]&&!(e<d.Length-1&&d[e+1]=='-')){Logger.log("letter outside class, setting to: "+d[e==0?d.Length-1:e-1]+". (chars["+((e+1)%d.Length)+"])");a[CursorPosition]=d[(e+1)%d.Length];SetAttribute("value",new string(a));Logger.DecLvl();return;}}Logger.log("letter inside class, setting to: "+(char)(((int)a[CursorPosition])+1));a[CursorPosition]=(char)(((int)a[CursorPosition])+1);SetAttribute("value",new string(a));Logger.DecLvl();}private void DecreaseLetter(){Logger.log("TextInput.DecreaseLetter()");Logger.IncLvl();if(CursorPosition==-1){return;}char[]a=GetAttribute("value").ToCharArray();char[]b=GetAttribute("allowedchars").ToCharArray();for(int d=0;d<b.Length;d++){if(b[d]!='_'&&b[d]==a[CursorPosition]&&!(d>0&&b[d-1]=='-')){Logger.log("letter outside class, setting to: "+b[d==0?b.Length-1:d-1]+". (chars["+(d==0?b.Length-1:d-1)+"])");a[CursorPosition]=b[d==0?b.Length-1:d-1];SetAttribute("value",new string(a));return;}}Logger.log("letter inside class, setting to: "+(char)(((int)a[CursorPosition])-1));a[CursorPosition]=(char)(((int)a[CursorPosition])-1);SetAttribute("value",new string(a));Logger.DecLvl();}private void IncreaseCursorPosition(){if(CursorPosition<Single.Parse(GetAttribute("maxlength"))-1){CursorPosition++;}else{CursorPosition=0;DecreaseCursorPosition();KeyPress("DOWN");}if(CursorPosition!=-1){PreventDefault("UP");PreventDefault("DOWN");}if(CursorPosition>=GetAttribute("value").Length){string a=GetAttribute("allowedchars");SetAttribute("value",GetAttribute("value")+a[0]);}}private void DecreaseCursorPosition(){if(CursorPosition>-1){CursorPosition--;}if(CursorPosition==-1){AllowDefault("UP");AllowDefault("DOWN");}}protected override void RenderText(ref List<string>a,int b,int d){string e=GetAttribute("value");if(CursorPosition!=-1){e=e.Substring(0,CursorPosition)+"|"+e.Substring(CursorPosition,1)+"|"+e.Substring(CursorPosition+1);}else if(e.Length==0){e="_"+e;}a.Add((IsSelected()?new string(new char[]{(char)187}):"  ")+" "+e);}}public abstract class DataStore:XMLTree{public DataStore():base(){}public override Dictionary<string,string>GetValues(Func<XMLTree,bool>a){Dictionary<string,string>b=base.GetValues(a);if(!a(this)){return b;}foreach(KeyValuePair<string,string>data in Attributes){if(!b.ContainsKey(data.Key)){b[data.Key]=data.Value;}}return b;}}public class SubmitButton:MenuItem{public SubmitButton(){Type="submitbutton";SetAttribute("flowdirection","horizontal");}protected override void PreRender(ref List<string>a,int b,int d){a.Add(IsSelected()?"[[  ":"[   ");base.PreRender(ref a,b,d);}protected override string PostRender(List<string>a,int b,int d){a.Add(IsSelected()?"  ]]":"   ]");return base.PostRender(a,b,d);}}public class Break:TextNode{public Break():base(""){Type="br";}protected override void RenderText(ref List<string>a,int b,int d){}protected override string PostRender(List<string>a,int b,int d){return "";}}public class Space:XMLTree{public Space():base(){Logger.debug("Space constructor()");Logger.IncLvl();Type="space";SetAttribute("width","0");Logger.DecLvl();}protected override void RenderText(ref List<string>a,int b,int d){Logger.debug(Type+".RenderText()");Logger.IncLvl();a.Add(TextUtils.CreateStringOfLength(" ",b));Logger.DecLvl();}}public class Hidden:XMLTree{public Hidden():base(){Type="hidden";}protected override string PostRender(List<string>a,int b,int d){return null;}}public class HiddenData:DataStore{public HiddenData():base(){Type="hiddendata";}protected override string PostRender(List<string>a,int b,int d){return null;}}class s:Hidden{public s():base(){Type="meta";}public override Dictionary<string,string>GetValues(Func<XMLTree,bool>a){if(a(this)){return Attributes;}else{return new Dictionary<string,string>();}}}}public static class TextUtils{public enum FONT{DEFAULT,MONOSPACE,}public static bool DEBUG=true;private static FONT selectedFont=FONT.DEFAULT;private static Dictionary<FONT,Dictionary<char,int>>LetterWidths=new Dictionary<FONT,Dictionary<char,int>>{{FONT.DEFAULT,new Dictionary<char,int>{{' ',8},{'!',8},{'"',10},{'#',19},{'$',20},{'%',24},{'&',20},{'\'',6},{'(',9},{')',9},{'*',11},{'+',18},{',',9},{'-',10},{'.',9},{'/',14},{'0',19},{'1',9},{'2',19},{'3',17},{'4',19},{'5',19},{'6',19},{'7',16},{'8',19},{'9',19},{':',9},{';',9},{'<',18},{'=',18},{'>',18},{'?',16},{'@',25},{'A',21},{'B',21},{'C',19},{'D',21},{'E',18},{'F',17},{'G',20},{'H',20},{'I',8},{'J',16},{'K',17},{'L',15},{'M',26},{'N',21},{'O',21},{'P',20},{'Q',21},{'R',21},{'S',21},{'T',17},{'U',20},{'V',20},{'W',31},{'X',19},{'Y',20},{'Z',19},{'[',9},{'\\',12},{']',9},{'^',18},{'_',15},{'`',8},{'a',17},{'b',17},{'c',16},{'d',17},{'e',17},{'f',9},{'g',17},{'h',17},{'i',8},{'j',8},{'k',17},{'l',8},{'m',27},{'n',17},{'o',17},{'p',17},{'q',17},{'r',10},{'s',17},{'t',9},{'u',17},{'v',15},{'w',27},{'x',15},{'y',17},{'z',16},{'{',9},{'|',6},{'}',9},{'~',18},{' ',8},{'¡',8},{'¢',16},{'£',17},{'¤',19},{'¥',19},{'¦',6},{'§',20},{'¨',8},{'©',25},{'ª',10},{'«',15},{'¬',18},{'­',10},{'®',25},{'¯',8},{'°',12},{'±',18},{'²',11},{'³',11},{'´',8},{'µ',17},{'¶',18},{'·',
9},{'¸',8},{'¹',11},{'º',10},{'»',15},{'¼',27},{'½',29},{'¾',28},{'¿',16},{'À',21},{'Á',21},{'Â',21},{'Ã',21},{'Ä',21},{'Å',21},{'Æ',31},{'Ç',19},{'È',18},{'É',18},{'Ê',18},{'Ë',18},{'Ì',8},{'Í',8},{'Î',8},{'Ï',8},{'Ð',21},{'Ñ',21},{'Ò',21},{'Ó',21},{'Ô',21},{'Õ',21},{'Ö',21},{'×',18},{'Ø',21},{'Ù',20},{'Ú',20},{'Û',20},{'Ü',20},{'Ý',17},{'Þ',20},{'ß',19},{'à',17},{'á',17},{'â',17},{'ã',17},{'ä',17},{'å',17},{'æ',28},{'ç',16},{'è',17},{'é',17},{'ê',17},{'ë',17},{'ì',8},{'í',8},{'î',8},{'ï',8},{'ð',17},{'ñ',17},{'ò',17},{'ó',17},{'ô',17},{'õ',17},{'ö',17},{'÷',18},{'ø',17},{'ù',17},{'ú',17},{'û',17},{'ü',17},{'ý',17},{'þ',17},{'ÿ',17},{'Ā',20},{'ā',17},{'Ă',21},{'ă',17},{'Ą',21},{'ą',17},{'Ć',19},{'ć',16},{'Ĉ',19},{'ĉ',16},{'Ċ',19},{'ċ',16},{'Č',19},{'č',16},{'Ď',21},{'ď',17},{'Đ',21},{'đ',17},{'Ē',18},{'ē',17},{'Ĕ',18},{'ĕ',17},{'Ė',18},{'ė',17},{'Ę',18},{'ę',17},{'Ě',18},{'ě',17},{'Ĝ',20},{'ĝ',17},{'Ğ',20},{'ğ',17},{'Ġ',20},{'ġ',17},{'Ģ',20},{'ģ',17},{'Ĥ',20},{'ĥ',17},{'Ħ',20},{'ħ',17},{'Ĩ',8},{'ĩ',8},{'Ī',8},{'ī',8},{'Į',8},{'į',8},{'İ',8},{'ı',8},{'Ĳ',24},{'ĳ',14},{'Ĵ',16},{'ĵ',8},{'Ķ',17},{'ķ',17},{'Ĺ',15},{'ĺ',8},{'Ļ',15},{'ļ',8},{'Ľ',15},{'ľ',8},{'Ŀ',15},{'ŀ',10},{'Ł',15},{'ł',8},{'Ń',21},{'ń',17},{'Ņ',21},{'ņ',17},{'Ň',21},{'ň',17},{'ŉ',17},{'Ō',21},{'ō',17},{'Ŏ',21},{'ŏ',17},{'Ő',21},{'ő',17},{'Œ',31},{'œ',28},{'Ŕ',21},{'ŕ',10},{'Ŗ',21},{'ŗ',10},{'Ř',21},{'ř',10},{'Ś',21},{'ś',17},{'Ŝ',21},{'ŝ',17},{'Ş',21},{'ş',17},{'Š',21},{'š',17},{'Ţ',17},{'ţ',9},{'Ť',17},{'ť',9},{'Ŧ',17},{'ŧ',9},{'Ũ',20},{'ũ',17},{'Ū',20},{'ū',17},{'Ŭ',20},{'ŭ',17},{'Ů',20},{'ů',17},{'Ű',20},{'ű',17},{'Ų',20},{'ų',17},{'Ŵ',31},{'ŵ',27},{'Ŷ',17},{'ŷ',17},{'Ÿ',17},{'Ź',19},{'ź',16},{'Ż',19},{'ż',16},{'Ž',19},{'ž',16},{'ƒ',19},{'Ș',21},{'ș',17},{'Ț',17},{'ț',9},{'ˆ',8},{'ˇ',8},{'ˉ',6},{'˘',8},{'˙',8},{'˚',8},{'˛',8},{'˜',8},{'˝',8},{'Ё',19},{'Ѓ',16},{'Є',18},{'Ѕ',21},{'І',8},{'Ї',8},{'Ј',16},{'Љ',28},{'Њ',21},{'Ќ',19},{'Ў',17},{'Џ',18},{'А',19},{'Б',19},{'В',19},{'Г',15},{'Д',19},{'Е',18},{'Ж',21},{'З',17},{'И',19},{'Й',19},{'К',17},{'Л',17},{'М',26},{'Н',18},{'О',20},{'П',19},{'Р',19},{'С',19},{'Т',19},{'У',19},{'Ф',20},{'Х',19},{'Ц',20},{'Ч',16},{'Ш',26},{'Щ',29},{'Ъ',20},{'Ы',24},{'Ь',19},{'Э',18},{'Ю',27},{'Я',20},{'а',16},{'б',17},{'в',16},{'г',15},{'д',17},{'е',17},{'ж',20},{'з',15},{'и',16},{'й',16},{'к',17},{'л',15},{'м',25},{'н',16},{'о',16},{'п',16},{'р',17},{'с',16},{'т',14},{'у',17},{'ф',21},{'х',15},{'ц',17},{'ч',15},{'ш',25},{'щ',27},{'ъ',16},{'ы',20},{'ь',16},{'э',14},{'ю',23},{'я',17},{'ё',17},{'ђ',17},{'ѓ',16},{'є',14},{'ѕ',16},{'і',8},{'ї',8},{'ј',7},{'љ',22},{'њ',25},{'ћ',17},{'ќ',16},{'ў',17},{'џ',17},{'Ґ',15},{'ґ',13},{'–',15},{'—',31},{'‘',6},{'’',6},{'‚',6},{'“',12},{'”',12},{'„',12},{'†',20},{'‡',20},{'•',15},{'…',31},{'‰',31},{'‹',8},{'›',8},{'€',19},{'™',30},{'−',18},{'∙',8},{'□',21},{'',40},{'',40},{'',40},{'',40},{'',41},{'',41},{'',32},{'',32},{'',40},{'',40},{'',34},{'',34},{'',40},{'',40},{'',40},{'',41},{'',32},{'',41},{'',32},{'',40},{'',40},{'',40},{'',40},{'',40},{'',40},{'',40},{'',40}}},{FONT.MONOSPACE,new Dictionary<char,int>{{' ',24},{'!',24},{'"',24},{'#',24},{'$',24},{'%',24},{'&',24},{'\'',24},{'(',24},{')',24},{'*',24},{'+',24},{',',24},{'-',24},{'.',24},{'/',24},{'0',24},{'1',24},{'2',24},{'3',24},{'4',24},{'5',24},{'6',24},{'7',24},{'8',24},{'9',24},{':',24},{';',24},{'<',24},{'=',24},{'>',24},{'?',24},{'@',24},{'A',24},{'B',24},{'C',24},{'D',24},{'E',24},{'F',24},{'G',24},{'H',24},{'I',24},{'J',24},{'K',24},{'L',24},{'M',24},{'N',24},{'O',24},{'P',24},{'Q',24},{'R',24},{'S',24},{'T',24},{'U',24},{'V',24},{'W',24},{'X',24},{'Y',24},{'Z',24},{'[',24},{'\\',24},{']',24},{'^',24},{'_',24},{'`',24},{'a',24},{'b',24},{'c',24},{'d',24},{'e',24},{'f',24},{'g',24},{'h',24},{'i',24},{'j',24},{'k',24},{'l',24},{'m',24},{'n',24},{'o',24},{'p',24},{'q',24},{'r',24},{'s',24},{'t',24},{'u',24},{'v',24},{'w',24},{'x',24},{'y',24},{'z',24},{'{',24},{'|',24},{'}',24},{'~',24},{' ',24},{'¡',24},{'¢',24},{'£',24},{'¤',24},{'¥',24},{'¦',24},{'§',24},{'¨',24},{'©',24},{'ª',24},{'«',24},{'¬',24},{'­',24},{'®',24},{'¯',24},{'°',24},{'±',24},{'²',24},{'³',24},{'´',24},{'µ',24},{'¶',24},{'·',24},{'¸',24},{'¹',24},{'º',24},{'»',24},{'¼',24},{'½',24},{'¾',24},{'¿',24},{'À',24},{'Á',24},{'Â',24},{'Ã',24},{'Ä',24},{'Å',24},{'Æ',24},{'Ç',24},{'È',24},{'É',24},{'Ê',24},{'Ë',24},{'Ì',24},{'Í',24},{'Î',24},{'Ï',24},{'Ð',24},{'Ñ',24},{'Ò',24},{'Ó',24},{'Ô',24},{'Õ',24},{'Ö',24},{'×',24},{'Ø',24},{'Ù',24},{'Ú',24},{'Û',24},{'Ü',24},{'Ý',24},{'Þ',24},{'ß',24},{'à',24},{'á',24},{'â',24},{'ã',24},{'ä',24},{'å',24},{'æ',24},{'ç',24},{'è',24},{'é',24},{'ê',24},{'ë',24},{'ì',24},{'í',24},{'î',24},{'ï',24},{'ð',24},{'ñ',24},{'ò',24},{'ó',24},{'ô',24},{'õ',24},{'ö',24},{'÷',24},{'ø',24},{'ù',24},{'ú',24},{'û',24},{'ü',24},{'ý',24},{'þ',24},{'ÿ',24},{'Ā',24},{'ā',24},{'Ă',24},{'ă',24},{'Ą',24},{'ą',24},{'Ć',24},{'ć',24},{'Ĉ',24},{'ĉ',24},{'Ċ',24},{'ċ',24},{'Č',24},{'č',24},{'Ď',24},{'ď',24},{'Đ',24},{'đ',24},{'Ē',24},{'ē',24},{'Ĕ',24},{'ĕ',24},{'Ė',24},{'ė',24},{'Ę',24},{'ę',24},{'Ě',24},{'ě',24},{'Ĝ',24},{'ĝ',24},{'Ğ',24},{'ğ',24},{'Ġ',24},{'ġ',24},{'Ģ',24},{'ģ',24},{'Ĥ',24},{'ĥ',24},{'Ħ',24},{'ħ',24},{'Ĩ',24},{'ĩ',24},{'Ī',24},{'ī',24},{'Į',24},{'į',24},{'İ',24},{'ı',24},{'Ĳ',24},{'ĳ',24},{'Ĵ',24},{'ĵ',24},{'Ķ',24},{'ķ',24},{'Ĺ',24},{'ĺ',24},{'Ļ',24},{'ļ',24},{'Ľ',24},{'ľ',24},{'Ŀ',24},{'ŀ',24},{'Ł',24},{'ł',24},{'Ń',24},{'ń',24},{'Ņ',24},{'ņ',24},{'Ň',24},{'ň',24},{'ŉ',24},{'Ō',24},{'ō',24},{'Ŏ',24},{'ŏ',24},{'Ő',24},{'ő',24},{'Œ',24},{'œ',24},{'Ŕ',24},{'ŕ',24},{'Ŗ',24},{'ŗ',24},{'Ř',24},{'ř',24},{'Ś',24},{'ś',24},{'Ŝ',24},{'ŝ',24},{'Ş',24},{'ş',24},{'Š',24},{'š',24},{'Ţ',24},{'ţ',24},{'Ť',24},{'ť',24},{'Ŧ',24},{'ŧ',24},{'Ũ',24},{'ũ',24},{'Ū',24},{'ū',24},{'Ŭ',24},{'ŭ',24},{'Ů',24},{'ů',24},{'Ű',24},{'ű',24},{'Ų',24},{'ų',24},{'Ŵ',24},{'ŵ',24},{'Ŷ',24},{'ŷ',24},{'Ÿ',24},{'Ź',24},{'ź',24},{'Ż',24},{'ż',24},{'Ž',24},{'ž',24},{'ƒ',24},{'Ș',24},{'ș',24},{'Ț',24},{'ț',24},{'ˆ',24},{'ˇ',24},{'ˉ',24},{'˘',24},{'˙',24},{'˚',24},{'˛',24},{'˜',24},{'˝',24},{'Ё',24},{'Ѓ',24},{'Є',24},{'Ѕ',24},{'І',24},{'Ї',24},{'Ј',24},{'Љ',24},{'Њ',24},{'Ќ',24},{'Ў',24},{'Џ',24},{'А',24},{'Б',24},{'В',24},{'Г',24},{'Д',24},{'Е',24},{'Ж',24},{'З',24},{'И',24},{'Й',24},{'К',24},{'Л',24},{'М',24},{'Н',24},{'О',24},{'П',24},{'Р',24},{'С',24},{'Т',24},{'У',24},{'Ф',24},{'Х',24},{'Ц',24},{'Ч',24},{'Ш',24},{'Щ',24},{'Ъ',24},{'Ы',24},{'Ь',24},{'Э',24},{'Ю',24},{'Я',24},{'а',24},{'б',24},{'в',24},{'г',24},{'д',24},{'е',24},{'ж',24},{'з',24},{'и',24},{'й',24},{'к',24},{'л',24},{'м',24},{'н',24},{'о',24},{'п',24},{'р',24},{'с',24},{'т',24},{'у',24},{'ф',24},{'х',24},{'ц',24},{'ч',24},{'ш',24},{'щ',24},{'ъ',24},{'ы',24},{'ь',24},{'э',24},{'ю',24},{'я',24},{'ё',24},{'ђ',24},{'ѓ',24},{'є',24},{'ѕ',24},{'і',24},{'ї',24},{'ј',24},{'љ',24},{'њ',24},{'ћ',24},{'ќ',24},{'ў',24},{'џ',24},{'Ґ',24},{'ґ',24},{'–',24},{'—',24},{'‘',24},{'’',24},{'‚',24},{'“',24},{'”',24},{'„',24},{'†',24},{'‡',24},{'•',24},{'…',24},{'‰',24},{'‹',24},{'›',24},{'€',24},{'™',24},{'−',24},{'∙',24},{'□',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24},{'',24}}}};public enum PadMode{LEFT,RIGHT,}public enum RoundMode{FLOOR,CEIL,}public static void SelectFont(FONT a){selectedFont=a;}public static int GetTextWidth(string a){if(DEBUG){Logger.debug("TextUtils.GetTextWidth()");}Logger.IncLvl();int b=0;a=a.Replace("\r","");string[]d=a.Split('\n');foreach(string line in d){b=Math.Max(b,GetLineWidth(line.ToCharArray()));}Logger.DecLvl();return b;}private static int GetLineWidth(char[]a){if(DEBUG){Logger.debug("TextUtils.GetLineWidth()");}Logger.IncLvl();int b=0;if(a.Length==0){return b;}foreach(char c in a){if(LetterWidths[selectedFont].ContainsKey(c)){b+=LetterWidths[selectedFont][c]+1;}else{b+=6;}}Logger.DecLvl();return b-1;}public static string RemoveLastTrailingNewline(string a){if(DEBUG){Logger.debug("TextUtils.RemoveLastTrailingNewline");}Logger.IncLvl();Logger.DecLvl();return(a.Length>1&&a[a.Length-1]=='\n')?a.Remove(a.Length-1):a;}public static string RemoveFirstTrailingNewline(string a){if(DEBUG)Logger.debug("TextUtils.RemoveFirstTrailingNewline");Logger.IncLvl();Logger.DecLvl();return(a.Length>1&&a[0]=='\n')?a.Remove(0):a;}public static string CenterText(string a,int b){if(DEBUG)Logger.debug("TextUtils.CenterText()");Logger.IncLvl();if(DEBUG){Logger.debug("text is "+a);Logger.debug("width is "+b.ToString());}string d="";string[]e=a.Split('\n');int f;foreach(string line in e){f=GetLineWidth(line.ToCharArray());d+=CreateStringOfLength(" ",(b-f)/2)+line+CreateStringOfLength(" ",(b-f)/2)+"\n";}d=RemoveLastTrailingNewline(d);Logger.DecLvl();return d;}public static string CreateStringOfLength(string a,int b){return CreateStringOfLength(a,b,RoundMode.FLOOR);}public static string CreateStringOfLength(string a,int b,RoundMode d){if(DEBUG)Logger.debug("TextUtils.CreateStringOfLength()");Logger.IncLvl();int e=GetLineWidth(a.ToCharArray());if(d==RoundMode.CEIL){b+=e;}string f="";if(b<e){Logger.DecLvl();return "";}for(int g=-1;g<b;g=g+e+1){f+=a;}Logger.DecLvl();return f;}public static string PadString(string a,int b,PadMode d,string e){if(DEBUG)Logger.debug("TextUtils.PadString()");Logger.IncLvl();if(d==PadMode.LEFT){Logger.DecLvl();return CreateStringOfLength(e,b-GetLineWidth(a.ToCharArray()))+a;}else if(d==PadMode.RIGHT){Logger.DecLvl();return a+CreateStringOfLength(e,b-GetLineWidth(a.ToCharArray()));}Logger.DecLvl();return a;}public static string PadText(string a,int b,PadMode d){return PadText(a,b,d," ");}public static string PadText(string a,int b,PadMode d,string e){if(DEBUG)Logger.debug("TextUtils.PadText()");Logger.IncLvl();string[]f=a.Split('\n');string g="";foreach(string line in f){g+=PadString(line,b,d,e)+"\n";}Logger.DecLvl();return g.Trim(new char[]{'\n'});}}public static class Parser{
public static string PackData(Dictionary<string,string>a){StringBuilder b=new StringBuilder();foreach(string key in a.Keys){b.Append(key+"=\""+a[key]+"\" ");}return b.ToString();}public static string Sanitize(string a){Logger.debug("Parser.Sanitize()");return a.Replace("\"","\\\"").Replace("'","\\'");}public static string UnescapeQuotes(string a){return a.Replace("\\\"","\"").Replace("\\'","'");}public static int GetNextUnescaped(char[]a,string b){return GetNextUnescaped(a,b,0);}public static int GetNextUnescaped(char[]a,string b,int d){return GetNextUnescaped(a,b,d,b.Length-d);}public static int GetNextUnescaped(char[]a,string b,int d,int e){int f=d+e-1;int g=b.IndexOfAny(a,d,f-d+1);while(g>0&&b[g-1]=='\\'){g=b.IndexOfAny(a,g+1,f-g);}return g;}public static int GetNextOutsideQuotes(char a,string b){return GetNextOutsideQuotes(new char[]{a},b);}public static int GetNextOutsideQuotes(char a,string b,bool d){return GetNextOutsideQuotes(new char[]{a},b,d);}public static int GetNextOutsideQuotes(char[]a,string b){return GetNextOutsideQuotes(a,b,true);}public static int GetNextOutsideQuotes(char[]a,string b,bool d){char[]e=new char[]{'\'','"'};int f=-1;int g=-1;int h;while(f==-1){if(d){h=GetNextUnescaped(e,b,g+1);}else{h=b.IndexOfAny(e,g+1);}if(h==-1){f=GetNextUnescaped(a,b,g+1);}else{f=GetNextUnescaped(a,b,g+1,h-g-1);if(f!=-1){Logger.debug("found needle: "+b.Substring(f));}if(d){g=GetNextUnescaped(new char[]{b[h]},b,h+1);}else{g=b.IndexOf(b[h],h+1);}}}return f;}public static List<String>ParamString2List(string a){a=a.Trim()+" ";List<string>b=new List<string>();char[]d=new char[]{'\'','"'};int e=-1;while(e!=a.Length-1){a=a.Substring(e+1);e=Parser.GetNextOutsideQuotes(new char[]{' ','\n'},a);b.Add(a.Substring(0,e).Trim(d));}return b;}public static Dictionary<string,string>GetXMLAttributes(string a){Dictionary<string,string>b=new Dictionary<string,string>();char[]d=new char[]{'\'','"'};List<string>e=ParamString2List(a);int f;foreach(string attribute in e){f=attribute.IndexOf('=');if(f==-1){b[attribute.Substring(0).ToLower()]="true";}else{b[attribute.Substring(0,f).ToLower()]=attribute.Substring(f+1).Trim(d);}}return b;}}public static class Logger{public static string History="";static IMyTextPanel DebugPanel;static public bool DEBUG=false;public static int offset=0;public static void log(string a){if(DebugPanel==null){}string b="";for(int d=0;d<offset;d++){b+="  ";}History+=b+a+"\n";P.Echo(b+a);}public static void debug(string a){if(!DEBUG){string b="";for(int d=0;d<offset;d++){b+="  ";}History+=b+a+"\n";return;}log(a);}public static void IncLvl(){offset+=2;}public static void DecLvl(){offset=offset-2;}}public class DataStorage:XML.DataStore{private Dictionary<string,Type>String2Type;private Dictionary<Type,string>Type2String;private Dictionary<string,string>StringEntries;private Dictionary<string,int>IntegerEntries;private Dictionary<string,float>FloatEntries;private static DataStorage Instance;private DataStorage():base(){String2Type=new Dictionary<string,Type>{{"string",typeof(String)},{"int",typeof(int)},{"float",typeof(float)}};Type2String=new Dictionary<Type,string>{{typeof(String),"string"},{typeof(int),"int"},{typeof(float),"float"}};Type="data";Attributes=new Dictionary<string,string>();StringEntries=new Dictionary<string,string>();IntegerEntries=new Dictionary<string,int>();FloatEntries=new Dictionary<string,float>();}public static DataStorage GetInstance(){if(Instance==null){Instance=new DataStorage();}return Instance;}public void Save(out string a){UpdateAttributes();DataStorage.SetUp();a="<data "+Parser.PackData(GetValues(b=>true))+"/>";}private void UpdateAttributes(){foreach(KeyValuePair<string,string>entry in StringEntries){Attributes[entry.Key]="string:"+entry.Value;}foreach(KeyValuePair<string,int>entry in IntegerEntries){Attributes[entry.Key]="int:"+entry.Value.ToString();}foreach(KeyValuePair<string,float>entry in FloatEntries){Attributes[entry.Key]="float:"+entry.Value.ToString();}}public static DataStorage Load(string a){DataStorage.SetUp();XML.XMLTree b=XML.ParseXML(a);if(b!=null){DataStorage d=b.GetNode(e=>e.Type=="data")as DataStorage;if(d!=null){Instance=d;}}return DataStorage.GetInstance();}public void Set<T>(string a,T b){Type d=GetEntryType(a);if(d!=null&&d!=typeof(T)){throw new Exception("ERROR: An entry for key '"+a+"' does already exist, but is of type '"+d.ToString()+"'!");}if(typeof(T)==typeof(string)){StringEntries[a]=(string)(object)b;}else if(typeof(T)==typeof(int)){IntegerEntries[a]=(int)(object)b;}else if(typeof(T)==typeof(float)){FloatEntries[a]=(float)(object)b;}}public Type GetEntryType(string a){if(StringEntries.ContainsKey(a)){return typeof(string);}else if(IntegerEntries.ContainsKey(a)){return typeof(int);}else if(FloatEntries.ContainsKey(a)){return typeof(float);}else{return null;}}public T Get<T>(string a){if(!Exists<T>(a)){throw new Exception("No entry found for key '"+a+"' of type '"+typeof(T).ToString()+"'!");}if(typeof(T)==typeof(string)){return(T)(object)StringEntries[a];}else if(typeof(T)==typeof(int)){return(T)(object)IntegerEntries[a];}else if(typeof(T)==typeof(float)){return(T)(object)FloatEntries[a];}else{throw new Exception("Error: Invalid Type at DataStore.Get<Type>(string key)!");}}public bool Exists(string a){return(Exists<string>(a)||Exists<int>(a)||Exists<float>(a));}public bool Exists<T>(string a){if(typeof(T)==typeof(string)){return StringEntries.ContainsKey(a);}else if(typeof(T)==typeof(int)){return IntegerEntries.ContainsKey(a);}else if(typeof(T)==typeof(float)){return FloatEntries.ContainsKey(a);}return false;}public List<string>GetKeys(){List<string>a=new List<string>(StringEntries.Keys.Count+IntegerEntries.Keys.Count+FloatEntries.Keys.Count);a.AddRange(StringEntries.Keys);a.AddRange(IntegerEntries.Keys);a.AddRange(FloatEntries.Keys);return a;}public static void SetUp(){if(!XML.NodeRegister.ContainsKey("data")){XML.NodeRegister.Add("data",()=>DataStorage.GetInstance());}}public override void SetAttribute(string a,string b){if(StringEntries==null||IntegerEntries==null||FloatEntries==null){base.SetAttribute(a,b);return;}Type d=typeof(string);string[]e=b.Split(':');if(e.Length>1&&String2Type.ContainsKey(e[0])){d=String2Type[e[0]];e[0]="";b=String.Join(":",e).Substring(1);}if(d==typeof(string)){Set(a,b);}else if(d==typeof(int)){int f;if(Int32.TryParse(b,out f)){Set(a,f);}}else if(d==typeof(float)){float g;if(Single.TryParse(b,out g)){Set(a,g);}}}}public class MAN{public class GridPlatformAgent:PlatformAgent{List<IMyLaserAntenna>LaserAntennas;List<IMyRadioAntenna>RadioAntennas;public GridPlatformAgent(MyGridProgram a,List<IMyTerminalBlock>b):base(a){LaserAntennas=new List<IMyLaserAntenna>();RadioAntennas=new List<IMyRadioAntenna>();foreach(IMyTerminalBlock antenna in b){IMyLaserAntenna d=antenna as IMyLaserAntenna;IMyRadioAntenna e=antenna as IMyRadioAntenna;if(d!=null){LaserAntennas.Add(d);}else if(e!=null){RadioAntennas.Add(e);}}Id=GenerateId(a.Me);a.Me.CustomName=Id.Name;}public override AgentId GenerateId(IMyProgrammableBlock a){if(!Id.Name.Contains("GridMaster")){a.CustomName="GridMaster";return base.GenerateId(a);}else{return Id;}}public override bool SendMessage(ref AgentMessage a){bool b=base.SendMessage(ref a);if(a.Receiver.Platform=="ALL"||!b){return SendToGrid(a)||b;}return true;}public bool SendToGrid(AgentMessage a){Logger.log("GridPlatformAgent.SendToGrid()");Logger.IncLvl();if(a.Receiver.Platform==Id.Platform||a.Receiver.Platform=="local"){return false;}if(a.Receiver.Platform=="ALL"||a.Receiver.Platform=="ANY"){Logger.debug("Receiver platform set to local...");a.Receiver=new AgentId(a.Receiver.Name+"@local");Logger.debug("Receiver id was set to: "+a.Receiver.ToString());}foreach(IMyRadioAntenna antenna in RadioAntennas){if(antenna.TransmitMessage("message \""+a.ToString()+"\"",MyTransmitTarget.Everyone)){Logger.log("Sending was successful.");Logger.DecLvl();return true;}}Logger.log("Could not send message by antenna...");ScheduleMessage(a);Logger.log("Message scheduled");if(ScheduledMessages.Count>0){Logger.log("Schedule refresh");ScheduleRefresh();}Logger.log("Sent to grid (finished)");Logger.DecLvl();return true;}}public class PlatformAgent:Agent{public int RefreshInterval;public ServiceRegister PlatformServices;public List<IMyTextPanel>ReceptionBuffers;public PlatformAgent(MyGridProgram a):base(a){PlatformServices=new ServiceRegister();ReceptionBuffers=new List<IMyTextPanel>();RefreshInterval=500;DataStorage b=DataStorage.Load(a.Storage??"");if(b.Exists<string>("id")){Id=new AgentId(b.Get<string>("id"));List<IMyTerminalBlock>d=new List<IMyTerminalBlock>();GTS.SearchBlocksOfName("RBUFFER-"+Id.Name,d);foreach(IMyTerminalBlock buffer in d){IMyTextPanel e=buffer as IMyTextPanel;if(e!=null){ReceptionBuffers.Add(e);}}}else{Id=GenerateId(a.Me);}a.Me.CustomName=Id.Name;new o.Platform(this).Setup();new p(this).Setup();}public void RegisterBuffers(List<string>a){foreach(string name in a){IMyTextPanel b=GTS.GetBlockWithName(name)as IMyTextPanel;if(b!=null){b.CustomName="RBUFFER-"+Id.Name;b.WritePublicText("");b.CustomData="";ReceptionBuffers.Add(b);}}}public void CollectPlatformMessages(){foreach(IMyTextPanel buffer in ReceptionBuffers){string a=buffer.CustomData;buffer.CustomData="";List<XML.XMLTree>b=XML.ParseXML(Parser.UnescapeQuotes(a)).GetAllNodes(d=>d.Type=="message");foreach(XML.XMLTree message in b){ReceiveMessage((AgentMessage)message);}}}public override void ReceiveMessage(AgentMessage a){if(a.Receiver.Platform==Id.Name){a.Receiver.Platform="local";}Logger.log("Looking for agent '"+a.Receiver+"'...");AgentMessage.StatusCodes b=AssignMessage(a);Logger.log("Status: "+b.ToString());ReceiveMessage(a,b);}public override void ReceiveMessage(AgentMessage a,AgentMessage.StatusCodes b){if(a.Receiver.Platform=="local"){a.Receiver.Platform=Id.Platform;}bool d=false;if(b==AgentMessage.StatusCodes.RECEIVERNOTFOUND||b==AgentMessage.StatusCodes.PLATFORMNOTFOUND){Logger.log("no receiver found; looking for service '"+a.Service+"'...");if(a.Service
!=null&&PlatformServices.ContainsKey(a.Service)){Logger.log("service is known.");if(a.Receiver.MatchesPlatform(Id)){if(PlatformServices.ContainsKey(a.Service)){List<PlatformService>e=PlatformServices[a.Service].FindAll(f=>a.Receiver.Matches(f.Provider)&&a.Sender!=f.Provider);if(a.Receiver.Name=="ALL"){foreach(PlatformService pService in e){AgentMessage g=a.Duplicate();g.Receiver=pService.Provider;d|=SendMessage(ref g);}}else{if(e.ElementAtOrDefault(0)!=null){a.Receiver=e[0].Provider;d=SendMessage(ref a);}}}}}if(!d){base.ReceiveMessage(a,b);}}else{base.ReceiveMessage(a,b);}}public override bool SendMessage(ref AgentMessage a){if(base.SendMessage(ref a)){Logger.log("base.SendMessage(message) did succeed.");return true;}else if(a.Sender.Platform=="local"){a.Sender.Platform=Id.Name;}if(a.Receiver.Platform!=Id.Name){Logger.log("Calling SendToPlatform(message, platform)...");return SendToPlatform(a,a.Receiver.Platform);}else{return false;}}public bool SendToPlatform(AgentMessage a,string b){Logger.IncLvl();Logger.debug("PlatformAgent.SendToPlatform()");if(b=="ALL"||b=="ANY"){List<IMyTerminalBlock>d=new List<IMyTerminalBlock>();GTS.SearchBlocksOfName("RBUFFER-",d,e=>(e.CustomName!="RBUFFER-"+Id.Name&&(e as IMyTextPanel)!=null));bool f=false;foreach(IMyTerminalBlock buffer in d){string g=buffer.CustomName.Replace("RBUFFER-","");if(g!=Id.Name){if(SendToPlatform(a,g)){f=true;if(b=="ANY"){return true;}}}}Logger.DecLvl();return f;}else{Logger.log("Trying to send to platform '"+b+"'...");IMyTextPanel h=GTS.GetBlockWithName("RBUFFER-"+b)as IMyTextPanel;if(h==null){Logger.log("No corresponding buffer found with name 'RBUFFER-"+b+"'.");Logger.DecLvl();return false;}else{Logger.log("Writing message to reception buffer of platform '"+b+"'...");h.CustomData+=a.ToString();Logger.DecLvl();return true;}}}public static string GenerateSuffix(){Logger.debug("PlatformAgent.GenerateSuffix()");Logger.IncLvl();const string a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";Random b=new Random();char[]d=new char[8];for(int e=0;e<8;e++){d[e]=a[b.Next(0,a.Length)];}Logger.DecLvl();return new string(d);}public override void Refresh(TimeSpan a){bool b=RefreshScheduled||(ElapsedTime.Milliseconds+a.Milliseconds>=RefreshInterval);RefreshScheduled=b;if(Timer!=null){if(RefreshInterval<1000){Timer.GetActionWithName("TriggerNow").Apply(Timer);}else{Timer.GetActionWithName("Start").Apply(Timer);}}base.Refresh(a);if(!b){return;}CollectPlatformMessages();}public virtual AgentId GenerateId(IMyProgrammableBlock a){System.Text.RegularExpressions.Regex b=new System.Text.RegularExpressions.Regex(@"-{.*}$");string d;if(b.IsMatch(a.CustomName)){d=b.Replace(a.CustomName,"-{"+PlatformAgent.GenerateSuffix()+"}");}else{d=a.CustomName+"-{"+PlatformAgent.GenerateSuffix()+"}";}return new AgentId(d+"@"+d);}}public class Agent{protected IMyTimerBlock Timer;protected TimeSpan ElapsedTimeValue;public TimeSpan ElapsedTime{get{return ElapsedTimeValue;}}protected bool RefreshScheduled;public AgentId Id;public MyGridProgram Prog;public IMyGridTerminalSystem GTS{get{return Prog.GridTerminalSystem;}}public Dictionary<string,Service>Services;protected Dictionary<int,AgentProtocol>Chats;protected List<AgentMessage>ScheduledMessages;protected Dictionary<string,List<AgentProtocol>>EventListeners;protected Dictionary<string,object>Knowledge;public Agent(MyGridProgram a){Logger.debug("Agent constructor");Logger.IncLvl();DataStorage b=DataStorage.Load(a.Storage??"");Prog=a;ElapsedTimeValue=new TimeSpan(0);Timer=null;if(b.Exists<string>("id")){Id=new AgentId(b.Get<string>("id"));}else{Id=new AgentId(a.Me.CustomName+"@local");}Knowledge=new Dictionary<string,object>();Services=new Dictionary<string,Service>();Chats=new Dictionary<int,AgentProtocol>();ScheduledMessages=new List<AgentMessage>();EventListeners=new Dictionary<string,List<AgentProtocol>>();new PrintProtocol(this).Setup();Logger.DecLvl();}public void Save(out string a){DataStorage b=DataStorage.GetInstance();b.Set<string>("id",Id.ToString());b.Save(out a);}public void SetKnowledgeEntry(string a,object b,AgentProtocol d){SetKnowledgeEntry(a,b,d,false);}public void SetKnowledgeEntry(string a,object b,AgentProtocol d,bool e){Logger.debug("Agent.SetKnowledgeEntry()");Logger.IncLvl();string f=e?a:d.GetProtocolId()+"_"+a;Knowledge[f]=b;Logger.DecLvl();}public object GetKnowledgeEntry(string a,AgentProtocol b){return GetKnowledgeEntry(a,b,false);}public object GetKnowledgeEntry(string a,AgentProtocol b,bool d){Logger.debug("Agent.GetKnowledgeEntry()");Logger.IncLvl();string e=d?a:b.GetProtocolId()+"_"+a;Logger.DecLvl();return Knowledge.GetValueOrDefault(e,null);}public void OnEvent(string a,AgentProtocol b){Logger.debug("Agent.OnEvent( )");Logger.IncLvl();if(!EventListeners.ContainsKey(a)){EventListeners[a]=new List<AgentProtocol>();}EventListeners[a].Add(b);Logger.DecLvl();}public void Event(string a){Logger.debug("Agent.Event( "+a+")");Logger.IncLvl();if(!EventListeners.ContainsKey(a)){Logger.DecLvl();return;}for(int b=EventListeners[a].Count-1;b>=0;b--){if(EventListeners[a][b]==null){EventListeners[a].RemoveAt(b);}else{EventListeners[a][b].NotifyEvent(a);}}Logger.DecLvl();}public virtual void ReceiveMessage(AgentMessage a){Logger.debug("Agent.ReceiveMessage(AgentMessage)");Logger.IncLvl();AgentMessage.StatusCodes b=AssignMessage(a);ReceiveMessage(a,b);Logger.DecLvl();}public virtual void ReceiveMessage(AgentMessage a,AgentMessage.StatusCodes b){Logger.debug("Agent.ReceiveMessage(AgentMessage, AgentMessage.StatusCode)");Logger.IncLvl();if(Id.MatchesPlatform(a.Receiver)&&a.Receiver.Name=="ALL"){AgentMessage d=a.Duplicate();SendMessage(ref d);}if(b==AgentMessage.StatusCodes.UNKNOWNERROR){return;}else if(b==AgentMessage.StatusCodes.RECEIVERNOTFOUND||b==AgentMessage.StatusCodes.PLATFORMNOTFOUND||b==AgentMessage.StatusCodes.SERVICENOTFOUND||b==AgentMessage.StatusCodes.CHATNOTFOUND){if(Id.MatchesPlatform(a.Receiver)&&a.Receiver.Name=="ANY"){SendMessage(ref a);}else{AgentMessage d=a.Duplicate();if(!((b==AgentMessage.StatusCodes.RECEIVERNOTFOUND||b==AgentMessage.StatusCodes.PLATFORMNOTFOUND)&&SendMessage(ref d))){d=a.MakeResponse(this.Id,b,"");SendMessage(ref d);}if(b==AgentMessage.StatusCodes.RECEIVERNOTFOUND||b==AgentMessage.StatusCodes.PLATFORMNOTFOUND){Logger.log("WARNING: Message Receiver Id does not conform with this agent's Id!");}else if(b==AgentMessage.StatusCodes.CHATNOTFOUND){Logger.log("WARNING: ChatId not found!");}else if(b==AgentMessage.StatusCodes.SERVICENOTFOUND){Logger.log("WARNING: No service with id '"+a.Service+"' found!");}}}else if(b==AgentMessage.StatusCodes.CHATIDNOTACCEPTED){AgentMessage e=a.MakeResponse(Id,b,"validId:"+AgentProtocol.ChatCount.ToString());SendMessage(ref e);}Logger.DecLvl();}protected virtual AgentMessage.StatusCodes AssignMessage(AgentMessage a){Logger.debug("Agent.AssignMessage()");Logger.IncLvl();if(!Id.MatchesPlatform(a.Receiver)){Logger.log("receiver platform does not match local platform.");return AgentMessage.StatusCodes.PLATFORMNOTFOUND;}else if(!Id.MatchesName(a.Receiver)){Logger.log("receiver does not match this agent.");return AgentMessage.StatusCodes.RECEIVERNOTFOUND;}else if(a.Service=="response"){if(!Chats.ContainsKey(a.ReceiverChatId)){if(a.Status!=AgentMessage.StatusCodes.UNKNOWNERROR&&a.Status!=AgentMessage.StatusCodes.CHATNOTFOUND&&a.Status!=AgentMessage.StatusCodes.SERVICENOTFOUND){return AgentMessage.StatusCodes.ABORT;}Logger.DecLvl();return AgentMessage.StatusCodes.CHATNOTFOUND;}else{Logger.log("Transmit message to chat "+a.ReceiverChatId.ToString());Chats[a.ReceiverChatId].ReceiveMessage(a);Logger.DecLvl();return AgentMessage.StatusCodes.OK;}}else if(!Services.ContainsKey(a.Service)){Logger.log("WARNING: Service not found");if(a.Status==AgentMessage.StatusCodes.CHATNOTFOUND){Logger.log("WARNING: Requested chat id did not exist on '"+(a.Sender.ToString()??"")+"'.");Logger.DecLvl();return AgentMessage.StatusCodes.ABORT;}else if(a.Status==AgentMessage.StatusCodes.SERVICENOTFOUND){Logger.log("WARNING: Requested service '"+(a.Service??"")+"' did not exist on '"+(a.Sender.ToString()??"")+"'.");Logger.DecLvl();return AgentMessage.StatusCodes.ABORT;}else if(a.Status==AgentMessage.StatusCodes.SERVICENOTFOUND){Logger.log("WARNING: An unknown error occured at '"+(a.Sender.ToString()??"")+"'.");Logger.DecLvl();return AgentMessage.StatusCodes.ABORT;}else{Logger.DecLvl();return AgentMessage.StatusCodes.SERVICENOTFOUND;}}else{Logger.log("create protocol '"+a.Service+"'.");AgentProtocol b=Services[a.Service].Create(this);if(a.ReceiverChatId!=-1){if(!b.TrySetId(a.ReceiverChatId)){b.Stop();return AgentMessage.StatusCodes.CHATIDNOTACCEPTED;}}AddChat(b);Logger.log("Transfer message to chat.");b.ReceiveMessage(a);Logger.DecLvl();return AgentMessage.StatusCodes.OK;}}public virtual bool SendMessage(ref AgentMessage a){Logger.debug("Agent.SendMessage");Logger.IncLvl();Logger.log("Sending message of '"+a.Sender.ToString()+"' to '"+a.Receiver.ToString()+"'...");Logger.log("Requested service: "+a.Service);Logger.log("Message content: "+a.Content);Logger.log("Message status: "+a.Status.ToString());IMyProgrammableBlock b=null;Logger.log("comparing receiver platform '"+a.Receiver.Platform+"' and own platform '"+Id.Platform+"'...");if(a.Receiver==Id){ReceiveMessage(a);}else if(a.Receiver.Name!=Id.Name&&(a.Receiver.Platform=="local"||a.Receiver.Platform==Id.Platform)){b=GTS.GetBlockWithName(a.Receiver.Name)as IMyProgrammableBlock;if(b==null){Logger.log("WARNING: Receiver with id '"+a.Receiver.ToString()+"' not found locally!");}}else{Logger.log("Receiver not local. Trying to find corresponding platform agent.");b=GTS.GetBlockWithName(a.Receiver.Platform)as IMyProgrammableBlock;if(b==null){if(Id.Platform!=Id.Name){b=GTS.GetBlockWithName(Id.Platform)as IMyProgrammableBlock;}if(b==null){Logger.log("WARNING: Not registered at any platform! Only local communication possible!");}}}if(b==null){Logger.DecLvl();return false;}if(a.Receiver.Platform=="local"&&a.Sender.Platform==Id.Platform){a.Sender
.Platform="local";}if(!b.TryRun("message \""+a.ToString()+"\"")){ScheduleMessage(a);}Logger.DecLvl();return true;}public void ScheduleMessage(AgentMessage a){Logger.debug("Agent.ScheduleMessage()");Logger.IncLvl();ScheduledMessages.Add(a);ScheduleRefresh();Logger.DecLvl();}public void SendScheduledMessages(){Logger.debug("Agent.SendScheduledMessages()");Logger.IncLvl();for(int a=ScheduledMessages.Count-1;a>=0;a--){AgentMessage b=ScheduledMessages[a];ScheduledMessages.RemoveAt(a);SendMessage(ref b);}Logger.DecLvl();}public void RegisterService(string a,Func<Agent,AgentProtocol>b){RegisterService(a,b,new Dictionary<string,string>());}public void RegisterService(string a,Func<Agent,AgentProtocol>b,Dictionary<string,string>d){Logger.debug("Agent.RegisterService()");Logger.IncLvl();Services.Add(a,new Service(a,(d.GetValueOrDefault("description")as String)??"",this.Id,new AgentId(d.GetValueOrDefault("permissions","ANY@ANY")),d.ContainsKey("providesui")&&d["providesui"]!="false",b));Logger.DecLvl();}public bool AddChat(AgentProtocol a){Logger.debug("Agent.AddChat();");Logger.IncLvl();if(Chats.ContainsKey(a.ChatId)){Logger.DecLvl();return false;}else{Chats[a.ChatId]=a;Logger.DecLvl();return true;}}public bool UpdateChatId(int a,int b){if(!Chats.ContainsKey(a)||Chats.ContainsKey(b)){return false;}else{Chats[b]=Chats[a];Chats.Remove(a);return true;}}public void StopChat(int a){if(Chats.ContainsKey(a)){StopChat(Chats[a]);}}public void StopChat(AgentProtocol a){Logger.log("Agent.StopChat() {"+a.GetProtocolId()+"}");Logger.IncLvl();foreach(KeyValuePair<string,List<AgentProtocol>>listeners in EventListeners){for(int b=listeners.Value.Count-1;b>=0;b--){if(listeners.Value[b]==a){listeners.Value.RemoveAt(b);}}}Chats.Remove(a.ChatId);Logger.DecLvl();}public void SetTimer(IMyTimerBlock a){Timer=a;}public void ScheduleRefresh(){Logger.debug("Agent.ScheduleRefresh()");Logger.IncLvl();RefreshScheduled=true;if(Timer!=null&&!Timer.IsCountingDown){Timer.GetActionWithName("Start").Apply(Timer);}Logger.DecLvl();}public virtual void Refresh(TimeSpan a){Logger.log("Agent.Refresh()");Logger.IncLvl();ElapsedTimeValue+=a;if(!RefreshScheduled){return;}RefreshScheduled=false;SendScheduledMessages();Event("refresh");ElapsedTimeValue=new TimeSpan(0);Logger.DecLvl();}}public abstract class AgentProtocol{static int ChatCountValue;private int ChatIdValue;private int PartnerIdValue;protected Agent Holder;public int TTL;public static int ChatCount{get{return ChatCountValue;}}public int ChatId{get{return ChatIdValue;}}public int PartnerId{get{return PartnerIdValue;}}public abstract string GetProtocolId();public virtual void NotifyEvent(string a){}public AgentProtocol(Agent a){Logger.debug("AgentProtocol constructor()");Logger.IncLvl();ChatIdValue=ChatCount;ChatCountValue++;Holder=a;Logger.DecLvl();}public bool TrySetId(int a){Logger.debug("AgentProtocol.TrySetId()");Logger.IncLvl();if(a==ChatId){Logger.DecLvl();return true;}else if(a>=ChatCount){ChatCountValue=a+1;ChatIdValue=a;Logger.DecLvl();return true;}else{Logger.DecLvl();return false;}}public abstract void Restart();public virtual void Start(){}public virtual void Stop(){Logger.debug("AgentProtocol.Stop()");if(ChatId==ChatCount-1){ChatCountValue=ChatId;}Holder.StopChat(ChatId);Logger.DecLvl();}public virtual void ReceiveMessage(AgentMessage a){Logger.debug("AgentProtocol.ReceiveMessage()");Logger.IncLvl();if(a.Status==AgentMessage.StatusCodes.CHATIDNOTACCEPTED){string[]b=a.Content.Split(':');if(b.Length==2&&b[0]=="validId"){int d=ChatId;int e=-1;if(!Int32.TryParse(b[1],out e)){Logger.log("WARNING: Invalid chat id requested!");Stop();}else{e=Math.Max(ChatCount,e);if(Holder.UpdateChatId(d,e)&&TrySetId(e)){Restart();}else{Logger.log("ERROR: Could not change chat id");Stop();}}}}Logger.DecLvl();}public static string MakeRoute(AgentId a,string b,string d){return "man:"+a+"::"+b+"("+Parser.Sanitize(d)+")";}public virtual void Setup(){}}public class AgentMessage:XML.DataStore{public enum StatusCodes{UNDEFINED,OK,CHATNOTFOUND,SERVICENOTFOUND,UNKNOWNERROR,ABORT,FORWARDED,RECEIVERNOTFOUND,PLATFORMNOTFOUND,CHATIDNOTACCEPTED}public enum Interfaces{UI,TEXT}public string Content{get{return Parser.UnescapeQuotes(GetAttribute("content"));}set{SetAttribute("content",Parser.Sanitize(value));}}public AgentId Sender{get{return new AgentId(GetAttribute("sender"));}set{SetAttribute("sender",value.ToString());}}public AgentId Receiver{get{return new AgentId(GetAttribute("receiver"));}set{SetAttribute("receiver",value.ToString());}}public int SenderChatId{get{int a;if(Int32.TryParse(GetAttribute("senderchatid"),out a)){return a;}else{return-1;}}set{SetAttribute("senderchatid",value.ToString());}}public int ReceiverChatId{get{int a;if(Int32.TryParse(GetAttribute("receiverchatid"),out a)){return a;}else{return-1;}}set{SetAttribute("receiverchatid",value.ToString());}}public string Service{get{return GetAttribute("service");}set{SetAttribute("service",value);}}public StatusCodes Status{get{StatusCodes a;if(Enum.TryParse<StatusCodes>(GetAttribute("status"),true,out a)){return a;}else{return StatusCodes.UNDEFINED;}}set{SetAttribute("status",value.ToString());}}public Interfaces TargetInterface{get{Interfaces a;if(Enum.TryParse<Interfaces>(GetAttribute("targetinterface"),true,out a)){return a;}else{return Interfaces.TEXT;}}set{SetAttribute("targetinterface",value.ToString());}}public AgentMessage():base(){Logger.debug("AgentMessage constructor()");Logger.IncLvl();Type="message";Attributes=new Dictionary<string,string>();Content="";Status=StatusCodes.OK;Service="response";TargetInterface=Interfaces.TEXT;Logger.DecLvl();}public AgentMessage(AgentId a,AgentId b,string d):this(){Logger.debug("AgentMessage constructor(AgentId, AgentId, string)");Logger.IncLvl();Content=d;Sender=a;Receiver=b;Status=StatusCodes.OK;Service="response";TargetInterface=Interfaces.TEXT;Logger.DecLvl();}public AgentMessage(AgentId a,AgentId b,StatusCodes d,string e,string f,int g):this(a,b,d,e,f,g,-1){}public AgentMessage(AgentId a,AgentId b,StatusCodes d,string e,string f,int g,int h):this(a,b,e){Logger.debug("AgentMessage constructor(AgentId, AgentId, StatusCodes, string, string, int)");Logger.IncLvl();Status=d;Service=f;SenderChatId=g;ReceiverChatId=h;TargetInterface=Interfaces.TEXT;Logger.DecLvl();}public AgentMessage(AgentId a,AgentId b,StatusCodes d,string e,string f):this(a,b,d,e,f,-1){}public AgentMessage MakeResponse(AgentId a,StatusCodes b,string d){Logger.debug("AgentMessage.MakeResponse()");Logger.IncLvl();AgentMessage e=new AgentMessage(a,Sender,b,d,"response");e.SenderChatId=ReceiverChatId;e.ReceiverChatId=SenderChatId;Logger.DecLvl();return e;}public AgentMessage Duplicate(){AgentMessage a=new AgentMessage(Sender,Receiver,Status,Content,Service,SenderChatId,ReceiverChatId);a.TargetInterface=TargetInterface;return a;}public override string ToString(){Logger.debug("AgentMessage.ToString()");Logger.IncLvl();Logger.DecLvl();return ToXML();}public string ToXML(){Logger.debug("AgentMessage.ToXML()");Logger.IncLvl();string a="<message ";a+=Parser.PackData(GetValues(b=>true));a+="/>";Logger.DecLvl();Logger.log("sanitize message");return Parser.Sanitize(a);}public static AgentMessage FromXML(string a){Logger.debug("AgentMessage.FromXML()");Logger.IncLvl();SetUp();a=Parser.UnescapeQuotes(a);XML.XMLTree b=XML.ParseXML(a);AgentMessage d=b.GetNode(e=>e.Type=="message")as AgentMessage;Logger.DecLvl();Logger.log("unescape message");return d;}public static void SetUp(){Logger.debug("AgentMessage.SetUp()");Logger.IncLvl();if(!XML.NodeRegister.ContainsKey("message")){XML.NodeRegister.Add("message",()=>{return new AgentMessage();});}Logger.DecLvl();}}public class AgentId:IEquatable<AgentId>{private string Id;public string Name{get{string[]a=Id.Split('@');return a[0];}set{string[]a=Id.Split('@');string b=(a.Length>1?a[1]:"");Id=value+"@"+b;}}public string Platform{get{string[]a=Id.Split('@');if(a.Length>1){return a[1];}else{return "local";}}set{string[]a=Id.Split('@');Id=a[0]+"@"+value;}}public override string ToString(){return Name+"@"+Platform;}public AgentId(string a){Id=a;}public bool MatchesName(AgentId a){return a.Name=="ANY"||a.Name=="ALL"||a.Name==Name||Name=="ANY"||Name=="ALL";}public bool MatchesPlatform(AgentId a){return a.Platform=="local"||a.Platform=="ALL"||a.Platform=="ANY"||a.Platform==""||a.Platform==Platform||Platform=="ALL"||Platform=="ANY";}public bool Matches(AgentId a){return MatchesName(a)&&MatchesPlatform(a);}public bool Equals(AgentId a){return Name==a.Name&&(Platform==a.Platform||Platform=="local"||a.Platform=="local"||Platform==""||a.Platform=="");}public override bool Equals(Object a){if(a==null)return false;AgentId b=a as AgentId;if(b==null)return false;else return Equals(b);}public static bool operator==(AgentId a,AgentId b){if(((object)a)==null||((object)b)==null)return Object.Equals(a,b);return a.Equals(b);}public static bool operator!=(AgentId a,AgentId b){if(((object)a)==null||((object)b)==null)return!Object.Equals(a,b);return!(a.Equals(b));}}public class Service:PlatformService{public Func<Agent,AgentProtocol>Create;public Service(string a,string b,AgentId d,Func<Agent,AgentProtocol>e):this(a,b,d,false,e){}public Service(string a,string b,AgentId d,bool e,Func<Agent,AgentProtocol>f):this(a,b,d,new AgentId("ANY@ANY"),e,f){}public Service(string a,string b,AgentId d,AgentId e,Func<Agent,AgentProtocol>f):this(a,b,d,e,false,f){}public Service(string a,string b,AgentId d,AgentId e,bool f,Func<Agent,AgentProtocol>g):base(a,b,d,e,f){Create=g;}}public class PlatformService{public string Id;public string Description;public AgentId Provider;private bool IsUIProvider;public bool ProvidesUI{get{return IsUIProvider;}}private AgentId PermissionMask;public PlatformService(string a,string b,AgentId d):this(a,b,new AgentId("ANY@ANY"),d,false){}public PlatformService(string a,string b,AgentId d,AgentId e):this(a,b,d,e,false){}public PlatformService(string a,string b,AgentId d,AgentId e,bool f){Id=a;Description=b;Provider=e;IsUIProvider=f;
PermissionMask=d;}public bool HasPermissions(AgentId a){return a.Matches(PermissionMask);}public string ToXML(){return "<service"+(ProvidesUI?" providesUI":"")+" id='"+Id.ToString()+"' description='"+Description+"' provider='"+Provider+"' permissions='"+PermissionMask+"'/>";}public string ToString(){return ToXML();}public static PlatformService FromXMLString(string a){XML.XMLTree b=XML.ParseXML(a).GetNode(d=>d.Type=="service");return PlatformService.FromXMLNode(b);}public static PlatformService FromXMLNode(XML.XMLTree a){if(a.Type!="service"){return null;}if(a.GetAttribute("id")==null||a.GetAttribute("provider")==null){return null;}return new PlatformService(a.GetAttribute("id"),a.GetAttribute("description")??"",new AgentId(a.GetAttribute("permissions")??"ANY@ANY"),new AgentId(a.GetAttribute("provider")),a.GetAttribute("providesui")!=null&&a.GetAttribute("providesui")!="false");}public bool Equals(PlatformService a){return Id==a.Id&&Provider==a.Provider;}public override bool Equals(Object a){if(a==null)return false;PlatformService b=a as PlatformService;if(b==null)return false;else return Equals(b);}public static bool operator==(PlatformService a,PlatformService b){if(((object)a)==null||((object)b)==null)return Object.Equals(a,b);return a.Equals(b);}public static bool operator!=(PlatformService a,PlatformService b){if(((object)a)==null||((object)b)==null)return!Object.Equals(a,b);return!(a.Equals(b));}}public class PrintProtocol:AgentProtocol{public override string GetProtocolId(){return "print";}public PrintProtocol(Agent a):base(a){}public override void ReceiveMessage(AgentMessage a){Logger.log("Message received:");Logger.IncLvl();Logger.log("from: "+a.Sender);Logger.log("content: "+a.Content);Logger.DecLvl();Stop();}public override void Restart(){}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new PrintProtocol(a);});}}class o:AgentProtocol{public class Platform:AgentProtocol{public override string GetProtocolId(){return "register-services";}public Platform(Agent a):base(a){}public override void ReceiveMessage(AgentMessage a){Logger.debug("ServiceRegistrationProtocol.ReceiveMessage(AgentMessage)");Logger.IncLvl();List<XML.XMLTree>b=XML.ParseXML(a.Content).GetAllNodes(d=>(d.Type=="service"));PlatformAgent e=Holder as PlatformAgent;AgentMessage f;if(e==null){f=a.MakeResponse(Holder.Id,AgentMessage.StatusCodes.UNKNOWNERROR,"ERROR: Agent is no PlatformAgent - service registration not possible!");f.SenderChatId=ChatId;Holder.SendMessage(ref f);Stop();return;}AgentId g=a.Sender;g.Platform=e.Id.Platform;PlatformService h;foreach(XML.XMLTree serviceNode in b){h=PlatformService.FromXMLNode(serviceNode);Logger.log("Register service '"+h.Id+"' of '"+g+"'.");if(h!=null){if(!e.PlatformServices.ContainsKey(h.Id)){e.PlatformServices[h.Id]=new List<PlatformService>();}e.PlatformServices[h.Id].Add(h);}}f=a.MakeResponse(Holder.Id,AgentMessage.StatusCodes.OK,"services registered");f.SenderChatId=ChatId;Holder.SendMessage(ref f);Stop();Logger.DecLvl();}public override void Restart(){}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new Platform(a);});}}public override string GetProtocolId(){return "complete-service-registration";}public o(Agent a):base(a){}public override void ReceiveMessage(AgentMessage a){if(a.Status==AgentMessage.StatusCodes.OK&&a.Content=="services registered"){Logger.log("Setting agent platform to '"+a.Sender.Name+"'.");Holder.Id.Platform=a.Sender.Name;Holder.Event("register");Stop();}else{base.ReceiveMessage(a);}}public override void Restart(){}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new o(a);});}}public class ServiceRegister:Dictionary<string,List<PlatformService>>{public ServiceRegister Merge(ServiceRegister a){ServiceRegister b=new ServiceRegister();foreach(KeyValuePair<string,List<PlatformService>>item in this){b.Add(item.Key,item.Value);}foreach(KeyValuePair<string,List<PlatformService>>item in a){if(b.ContainsKey(item.Key)){b[item.Key].AddList<PlatformService>(item.Value);b[item.Key]=Util.Uniques<PlatformService>(b[item.Key]);}else{b[item.Key]=item.Value;}}return b;}public string ToXML(){string a="<services>";foreach(KeyValuePair<string,List<PlatformService>>item in this){foreach(PlatformService service in item.Value){a+=service.ToXML();}}a+="</services>";return a;}}class p:AgentProtocol{public override string GetProtocolId(){return "get-services";}public p(Agent a):base(a){}public override void ReceiveMessage(AgentMessage a){if(a.Status==AgentMessage.StatusCodes.OK){List<PlatformService>b=new List<PlatformService>(Holder.Services.Values);PlatformAgent d=Holder as PlatformAgent;if(d!=null){foreach(List<PlatformService>platformServices in d.PlatformServices.Values){b.AddRange(platformServices);}}b=Util.Uniques<PlatformService>(b);string e="<platformInfo platformname='"+Parser.Sanitize(Holder.Prog.Me.CubeGrid.CustomName)+"'/>";e+="<services>";foreach(PlatformService service in b){if((a.TargetInterface==AgentMessage.Interfaces.TEXT||service.ProvidesUI)){e+=service.ToXML();}else{if(!service.HasPermissions(a.Sender)){Logger.log("no permissions: "+service.Id);}}}e+="</services>";AgentMessage f=a.MakeResponse(Holder.Id,AgentMessage.StatusCodes.OK,e);f.TargetInterface=AgentMessage.Interfaces.UI;f.SenderChatId=ChatId;Holder.ScheduleMessage(f);Stop();}else{base.ReceiveMessage(a);}}public override void Restart(){}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new p(a);},new Dictionary<string,string>{{"description","List Services"}});}}public class UITerminalAgent:RegisteredAgent{public XML.UIController UI;public IMyTextPanel Screen;public UITerminalAgent(MyGridProgram a,IMyTextPanel b):base(a){Logger.debug("UITerminalAgent constructor()");Logger.IncLvl();Screen=b;Logger.log("Setting up UI");UI=XML.UIController.FromXML("<meta historyDisabled/><hl width='100%'/>Requesting Services...<hl width='100%'/>");Logger.log("Setup RequestRouteProtocol");new r(this).Setup();Logger.log("Setup UIServiceIndex");UIServiceIndexServer d=new UIServiceIndexServer(this);d.Setup();d.LoadHomeScreen();Logger.DecLvl();}public void LoadXML(string a){Logger.debug("UITerminalAgent.LoadUI()");Logger.IncLvl();UI.LoadXML(a);Logger.DecLvl();}public void LoadUI(XML.XMLTree a){Logger.debug("UITerminalAgent.LoadUI()");Logger.IncLvl();UI.LoadUI(a);Logger.DecLvl();}public void UpdateScreen(){Logger.debug("UITerminalAgent.UpdateScreen()");Logger.IncLvl();UI.RenderTo(Screen);UI.ApplyScreenProperties(Screen);Logger.DecLvl();}public void Call(List<string>a){Logger.debug("UITerminalAgent.Call()");Logger.IncLvl();UI.Call(a);UpdateScreen();Logger.DecLvl();}}public class RegisteredAgent:Agent{public RegisteredAgent(MyGridProgram a):base(a){if(Id.Platform!="local"&&(GTS.GetBlockWithName(Id.Platform)as IMyProgrammableBlock)==null){Id.Platform="local";}new o(this).Setup();new q(this).Setup();}public void RegisterWith(string a){Logger.log("RegisteredAgent.RegisterWith()");Logger.IncLvl();AgentId b=new AgentId(a+"@local");o d=new o(this);Chats[d.ChatId]=d;string e="<services>";foreach(KeyValuePair<string,Service>service in Services){if(service.Value.HasPermissions(new AgentId("**@local"))){e+=service.Value.ToXML();}}e+="</services>";AgentMessage f=new AgentMessage(this.Id,b,AgentMessage.StatusCodes.OK,e,new o.Platform(this).GetProtocolId(),d.ChatId);Logger.log("Registering:");Logger.log("msg: "+f.ToXML());SendMessage(ref f);Logger.DecLvl();}}class q:AgentProtocol{int State;public override string GetProtocolId(){return "print-platform-services";}public q(Agent a):base(a){Logger.log("Create new PrintPlatformServicesProtocol");State=0;}public override void ReceiveMessage(AgentMessage a){Logger.log("PrintPlatformServicesProtocol.ReceiveMessage(message)");switch(State){case 0:Logger.log("Handling state 0");if(Holder.Id.Platform=="local"){Logger.log("WARNING: PrintPlatformServicesProtocol started, but agent is not registered at any platform!");Stop();return;}else{AgentMessage b=new AgentMessage(Holder.Id,new AgentId(Holder.Id.Platform+"@local"),AgentMessage.StatusCodes.OK,"","get-services",ChatId);b.SenderChatId=ChatId;Holder.SendMessage(ref b);State=1;}break;case 1:Logger.log("Handling state 1");if(a.Status==AgentMessage.StatusCodes.OK){List<XML.XMLTree>d=XML.ParseXML(a.Content).GetAllNodes(e=>e.Type=="service");Logger.log("Available Platform Services:");foreach(XML.XMLTree service in d){Logger.log("  "+service.GetAttribute("id"));}}else{base.ReceiveMessage(a);Logger.log("An error occured in protocol PrintPlatformServicesProtocol: "+a.Status.ToString());}Stop();break;}}public override void Restart(){State=0;ReceiveMessage(null);}public override void Setup(){Holder.RegisterService(GetProtocolId(),a=>{return new q(a);});}}class r:AgentProtocol{String RouteDefinition;public override string GetProtocolId(){return "request-route";}private XML.UIController UI;public r(Agent a):base(a){Logger.debug("RequestRouteProtocol constructor()");}public override void Restart(){Logger.debug("RequestRouteProtocol.Restart()");Logger.IncLvl();if(RouteDefinition!=null){RequestRoute(RouteDefinition);}Logger.DecLvl();}public override void ReceiveMessage(AgentMessage a){Logger.debug("RequestRouteProtocol.ReceiveMessage()");Logger.IncLvl();if(a.Status!=AgentMessage.StatusCodes.OK){base.ReceiveMessage(a);return;}if(a.GetAttribute("uiupdates")!=null||a.GetAttribute("uiupdates")!="false"){ListenForUIUpdate(true);}UITerminalAgent b=Holder as UITerminalAgent;if(b!=null){try{XML.XMLTree d=XML.ParseXML(a.Content);b.LoadUI(d);b.UpdateScreen();}catch{Logger.log("WARNING: Invalid UI received from "+a.Sender);}Stop();}else{Logger.log("WARNING: Agent is no UITerminalAgent. Can not display UI.");base.ReceiveMessage(a);Stop();Logger.DecLvl();return;}Logger.DecLvl();}public bool RequestRoute(string a){Logger.log("RequestRouteProtocol.RequestRoute()");Logger.IncLvl();string b=@"(?<provider>[\w{}\s_\-#]+@[\w{}\s_\-#]+)::(?<service>[\w\-]+)(\((?<argument>[^)]*)\)){0,1}";
System.Text.RegularExpressions.Regex d=new System.Text.RegularExpressions.Regex(b);System.Text.RegularExpressions.Match e=d.Match(a);if(!e.Success){throw new Exception("WARNING: Route not understood: <<"+a+">>");Logger.log("WARNING: Route not understood: <<"+a+">>");Logger.DecLvl();Stop();return false;}ListenForUIUpdate(false);AgentId f=new AgentId(e.Groups["provider"].Value);string g=e.Groups["service"].Value;string h=Parser.UnescapeQuotes(e.Groups["argument"].Value);UITerminalAgent i=Holder as UITerminalAgent;h+=" "+(i.UI.GetPackedValues()??"");i.LoadXML("<meta refresh historyDisabled backgroundColor='000000' fontColor='CC0000'/><br/><br/><hl/>Loading...<hl/>");i.UpdateScreen();RouteDefinition=a;AgentMessage j=new AgentMessage(Holder.Id,f,AgentMessage.StatusCodes.OK,h,g,ChatId);j.TargetInterface=AgentMessage.Interfaces.UI;j.SenderChatId=ChatId;Holder.ScheduleMessage(j);Logger.DecLvl();return true;}public void ListenForUIUpdate(bool a){if(a){Holder.RegisterService("update-ui",b=>new r(b));}else{Holder.Services.Remove("update-ui");}}public override void Setup(){Logger.debug("RequestRouteProtocol.RegisterServices()");Logger.IncLvl();XML.Route.RouteHandlers.Add("man",(a,b)=>{r d=new r(Holder);Holder.AddChat(d);d.UI=b;d.RequestRoute(a);});Logger.DecLvl();}}public class UIServiceIndexServer:AgentProtocol{static string XMLHeader="<meta fontColor='000000' backgroundColor='999999' fontSize='1.5' $ATTRIBUTES$/><uicontrols>$TITLE$</uicontrols><hl/>";public override string GetProtocolId(){return "get-ui-services-index";}private int RefreshTime;private XML.XMLTree UIRoot;public Dictionary<string,List<PlatformService>>Services{get{if(Holder.GetKnowledgeEntry("UISERVICES",this)==null){Holder.SetKnowledgeEntry("UISERVICES",new Dictionary<string,List<PlatformService>>(),this);}return Holder.GetKnowledgeEntry("UISERVICES",this)as Dictionary<string,List<PlatformService>>;}}public Dictionary<string,string>Platforms{get{if(Holder.GetKnowledgeEntry("UIPLATFORMS",this)==null){Holder.SetKnowledgeEntry("UIPLATFORMS",new Dictionary<string,string>(),this);}return Holder.GetKnowledgeEntry("UIPLATFORMS",this)as Dictionary<string,string>;}}AgentId UIReceiver;bool HomePageActive{get{object a=Holder.GetKnowledgeEntry("HomePageActive",this);return a!=null&&(bool)a;}set{Holder.SetKnowledgeEntry("HomePageActive",value,this);}}public UIServiceIndexServer(Agent a):base(a){Logger.log("UIServiceIndexServer constructor");RefreshTime=1250;}public override void ReceiveMessage(AgentMessage a){Logger.IncLvl();Logger.debug("UIServicesIndexServer.ReceiveMessage()");if(a.Status==AgentMessage.StatusCodes.OK){ReceiveServices(a);}else{base.ReceiveMessage(a);}Logger.DecLvl();}private void ReceiveServices(AgentMessage a){Logger.debug("UIServicesIndexServer.ReceiveServices()");Logger.IncLvl();XML.XMLTree b;try{Logger.log("test");b=XML.ParseXML(a.Content);}catch{Logger.log("WARNING: Invalid message received!");Logger.DecLvl();return;}string d=a.Sender.Platform;string e=b.GetNode(f=>f.Type=="platforminfo").GetAttribute("platformname");List<PlatformService>g=new List<PlatformService>();Services[d]=new List<PlatformService>();Platforms[d]=Parser.UnescapeQuotes(e??d);PlatformService h;foreach(XML.XMLTree serviceNode in b.GetAllNodes(f=>f.Type=="service")){h=PlatformService.FromXMLNode(serviceNode);if(h!=null){Services[d].Add(h);}}if(HomePageActive)LoadHomeScreen();Logger.DecLvl();}public override void Restart(){}public override void NotifyEvent(string a){Logger.log("UIServiceIndexServer.NotifyEvent()");Logger.IncLvl();switch(a){case "register":RetrieveServices();break;case "refresh":int b=(int)Holder.GetKnowledgeEntry("TimeTillRefresh",this);b-=Holder.ElapsedTime.Milliseconds;Logger.log("Time Till Refresh: "+b);if(b<0){b=RefreshTime;RetrieveServices();}Holder.ScheduleRefresh();Holder.SetKnowledgeEntry("TimeTillRefresh",b,this);break;default:base.NotifyEvent(a);break;}Logger.DecLvl();}public void SetUIReceiver(AgentId a){UIReceiver=a;}private void RetrieveServices(){Logger.debug("UIServiceIndexServer.RetrieveServices()");Logger.IncLvl();AgentMessage a=new AgentMessage(Holder.Id,new AgentId("ALL@ALL"),AgentMessage.StatusCodes.OK,"","get-services",ChatId);a.TargetInterface=AgentMessage.Interfaces.UI;a.SenderChatId=ChatId;Holder.SendMessage(ref a);Logger.DecLvl();}public string PageHome(){Logger.debug("UIServiceIndexServer.PageHome()");Logger.IncLvl();StringBuilder a=new StringBuilder(XMLHeader).Replace("$TITLE$","Platforms").Replace("$ATTRIBUTES$","uiServiceIndexHome");a.Append("<menu id='platformMenu'>");a.Append(GetPlatformMenuitems());a.Append("</menu>");Logger.DecLvl();return a.ToString();}private StringBuilder GetPlatformMenuitems(){StringBuilder a=new StringBuilder();foreach(string key in Platforms.Keys){a.Append("<menuItem route='fn:show-platform-services' platform='"+key+"'>"+Platforms[key]+"</menuitem>");}return a;}public string PagePlatformServices(string a){StringBuilder b=new StringBuilder(XMLHeader).Replace("$TITLE$",Platforms[a]+" Services");b.Append("<menu>");foreach(PlatformService service in Services[a]){b.Append("<menuitem route='"+MakeRoute(service.Provider,service.Id,"")+"'>"+service.Description+"</menuitem>");}b.Append("</menu>");return b.ToString();}public void LoadHomeScreen(){Logger.log("UIServiceIndexServer.LoadHomeScreen()");Logger.IncLvl();UITerminalAgent a=Holder as UITerminalAgent;if(a!=null){XML.XMLTree b=a.UI.GetNode(d=>d.Type=="meta");bool e=(b!=null&&b.GetAttribute("uiserviceindexhome")!=null);if(HomePageActive&&!e){Logger.log("Setting HomPageActive to false");HomePageActive=false;}else{if(e){b.SetAttribute("historydisabled","true");}XML.XMLTree f=XML.ParseXML(PageHome());a.LoadUI(f);HomePageActive=true;a.UpdateScreen();Holder.ScheduleRefresh();}}Logger.DecLvl();}public override void Setup(){Logger.debug("UIServiceIndexServer.Setup()");Logger.IncLvl();Logger.log("Create ui app");XML.Route.RegisterRouteFunction("show-platform-services",a=>{string b=a.GetSelectedNode().GetAttribute("platform");if(b!=null){a.LoadUI(XML.ParseXML(PagePlatformServices(b)));}});Logger.log("Create event listeners");Holder.SetKnowledgeEntry("TimeTillRefresh",RefreshTime,this);AgentProtocol d=new UIServiceIndexServer(Holder);Holder.AddChat(d);Holder.OnEvent("register",d);Holder.OnEvent("refresh",d);Holder.SetKnowledgeEntry("HomePageActive",false,this);Logger.DecLvl();}}public class UIServerProtocol:AgentProtocol{public override string GetProtocolId(){return "serve-ui-page";}public string ApplicationId;public Dictionary<string,string>ResponseData;public IMyGridTerminalSystem GTS{get{return Holder.GTS;}}public Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>Pages{get{return GetPageGenerators().Where(a=>a.Key.StartsWith(ApplicationId+"_")).ToDictionary(a=>a.Key,a=>a.Value);}set{foreach(KeyValuePair<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>page in value){SetPageGenerator(page.Key,page.Value,false);}}}public UIServerProtocol(Agent a):base(a){Logger.debug("UIServerProtocol constructor");Logger.IncLvl();if(!GetPageGenerators().ContainsKey("404")){GetPageGenerators()["404"]=(b,d,e)=>"Page not found!<hl/><uicontrols>BACK</uicontrols>";}ApplicationId="";Logger.DecLvl();}public void SetPageGenerator(string a,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>b){SetPageGenerator(a,b,false);}private void SetPageGenerator(string a,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>b,bool d){Logger.debug("UIServerProtocol.SetPageGenerator()");Logger.IncLvl();string e=d?a:ApplicationId+"_"+a;GetPageGenerators()[e]=b;Logger.DecLvl();}public Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>GetPageGenerator(string a){return GetPageGenerator(a,false);}public string GetPage(string a,AgentMessage b,Dictionary<string,string>d){return GetPageGenerator(a)(this,b,d);}private Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>GetPageGenerator(string a,bool b){Logger.debug("UIServerProtocol.GetPageGenerator()");Logger.IncLvl();string d=b?a:ApplicationId+"_"+a;Logger.DecLvl();return GetPageGenerators().GetValueOrDefault(d,GetPageGenerators()["404"]??((e,f,g)=>"404"));}private Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>GetPageGenerators(){Logger.debug("UIServerProtocol.GetPageGenerators()");Logger.IncLvl();if(Holder.GetKnowledgeEntry("UIPAGES",this)==null){Holder.SetKnowledgeEntry("UIPAGES",new Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>(),this);}Logger.DecLvl();return Holder.GetKnowledgeEntry("UIPAGES",this)as Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>;}public override void ReceiveMessage(AgentMessage a){Logger.debug("UIServerProtocol.ReceiveMessage()");Logger.IncLvl();if(a.Status==AgentMessage.StatusCodes.OK){Dictionary<string,string>b=Parser.GetXMLAttributes(a.Content);ResponseData=new Dictionary<string,string>();string d=GetPage(b.GetValueOrDefault<string,string>("page")??"",a,b);AgentMessage e=a.MakeResponse(Holder.Id,AgentMessage.StatusCodes.OK,d);e.SenderChatId=ChatId;foreach(KeyValuePair<string,string>entry in ResponseData){if(e.GetAttribute(entry.Key)==null){e.SetAttribute(entry.Key,entry.Value);}}Holder.SendMessage(ref e);Stop();}else{base.ReceiveMessage(a);}Logger.DecLvl();}public static bool CreateApplication(Agent a,string b,string d,Dictionary<string,Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>>e){Logger.debug("UIServerProtocol.CreateApplication()");Logger.IncLvl();UIServerProtocol f=new UIServerProtocol(a);f.SelectApplication(b);f.Pages=e;if(a.Services.ContainsKey(b)){Logger.DecLvl();return false;}a.RegisterService(b,g=>{UIServerProtocol h=new UIServerProtocol(g);h.SelectApplication(b);return h;},new Dictionary<string,string>{{"description",d},{"providesui","true"}});Logger.DecLvl();return true;}static public Func<UIServerProtocol,AgentMessage,Dictionary<string,string>,string>
SimplePage(string a,string b){return(d,e,f)=>b;}public override void Restart(){}public void SelectApplication(string a){ApplicationId=a;}public string MakeApplicationRoute(string a,string b){return MakeRoute(Holder.Id,ApplicationId,"page='"+a+"' "+b);}}}public static class Util{public static List<T>Uniques<T>(List<T>a){List<T>b=new List<T>();bool d;foreach(T itemIn in a){d=false;foreach(T itemOut in b){if(itemOut.Equals(itemIn)){d=true;}}if(!d){b.Add(itemIn);}}return b;}}